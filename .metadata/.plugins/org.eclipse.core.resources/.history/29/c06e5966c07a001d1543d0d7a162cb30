/*
 * 									stm32f407xx_usart_drivers.c
 *
 *  This file contains USART driver API implementations.
 *
 */

#include "stm32f407xx_usart_drivers.h"





/* -- > Peripheral Clock Setup  < -- */
/* ------------------------------------------------------------------------------------------------------
 * Name		:  	USART_PeriClockControl
 * Description	:	Peripheral Clock Setup API:
 			This function Enables or Disables peripheral clock for the given UART peripheral
 * Parameter 1	:	Base address of the UART peripheral
 * Parameter 2	:	ENABLE or DISABLE Macro
 * Return Type	:	none (void)
 * Note		:
 * ------------------------------------------------------------------------------------------------------ */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{

}


/* -- > Peripheral Initialize and De-initialize  < -- */
/* ------------------------------------------------------------------------------------------------------
 * Name		:	USART_Init
 * Description	:	Peripheral Initialize API:
 *			To initialize the given USART peripheral.
 * Parameter 1	:	Handle pointer variable
 * Return Type	:	none (void)
 * Note		:
 * ------------------------------------------------------------------------------------------------------ */
void USART_Init(USART_Handle_t *pUSARTHandle)
{

}


/* ------------------------------------------------------------------------------------------------------
 * Name		:	USART_DeInit
 * Description	:	USART Peripheral De-Initialize API:
 *			reset all the registers of USART peripheral mentioned
 * Parameter 1	:	Base address of the USART peripheral
 * Return Type	:	none (void)
 * Note		:
 * ------------------------------------------------------------------------------------------------------ */
void USART_DeInit(USART_RegDef_t *pUSARTx)
{

}


/* -- > SPI Send and Receive Data < -- */

/* ------------------------------------------------------------------------------------------------------
 * Name		:	USART_SendData
 * Description	:	USART Peripheral Send Data API:
 *
 * Parameter 1	:	Base address of the USART peripheral
 * Parameter 2 	:	Pointer to data
 * Parameter 3	:   	Length of the Data to send
 * Return Type	:	none (void)
 * Note		:	Blocking API (Polling), function call will wait until all the bytes are transmitted.
 * ------------------------------------------------------------------------------------------------------ */
void USART_SendData(USART_RegDef_t *pUSARTx, uint8_t *pTxBuffer, uint32_t LenOfData)
{

}


/* ------------------------------------------------------------------------------------------------------
 * Name		:	USART_ReceiveData
 * Description	:	USART Peripheral Receive Data API:
 *
 * Parameter 1	:	Base address of the USART peripheral
 * Parameter 2 	:	Pointer to Rx buffer
 * Parameter 3	:   	Length of the Data to send
 * Return Type	:	none (void)
 * Note		:	Blocking API (Polling), function call will wait until all the bytes are received.
 * ------------------------------------------------------------------------------------------------------ */
void USART_ReceiveData(USART_RegDef_t *pUSARTx, uint8_t *pRxBuffer, uint32_t LenOfData)
{

}


/* ------------------------------------------------------------------------------------------------------
 * Name		:	USART_SendData_IT
 * Description	:	USART Peripheral Interrupt Based Send Data API:
 *
 * Parameter 1	:	Handle pointer variable
 * Parameter 2 	:	Pointer to data
 * Parameter 3	:   	Length of the Data to send
 * Return Type	:	uint8_t (State)
 * Note		:
 * ------------------------------------------------------------------------------------------------------ */
uint8_t USART_SendData_IT(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t LenOfData)
{

}


/* ------------------------------------------------------------------------------------------------------
 * Name		:	USART_ReceiveData_IT
 * Description	:	USART Peripheral Interrupt Based Receive Data API:
 *
 * Parameter 1	:	Handle pointer variable
 * Parameter 2 	:	Pointer to Rx buffer
 * Parameter 3	:   	Length of the Data to send
 * Return Type	:	uint8_t (State)
 * Note		:
 * ------------------------------------------------------------------------------------------------------ */
uint8_t USART_ReceiveData_IT(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t LenOfData)
{

}


/* -- > IRQ Configuration and ISR Handling < -- */
/* ------------------------------------------------------------------------------------------------------
 * Name		:	USART_IRQInterruptConfig
 * Description	:	To configure IRQ:
 *			Processor specific configurations (NVIC Registers)
 * Parameter 1	:	IRQ number
 * Parameter 2	:	Enable or Disable the IRQ (ENABLE or DISABLE Macro)
 * Return Type	:	none (void)
 * Note		:
 * ------------------------------------------------------------------------------------------------------ */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{

}


/* ------------------------------------------------------------------------------------------------------
 * Name		:	USART_IRQPriorityConfig
 * Description	:	To configure the priority of the interrupt:
 *
 * Parameter 1	:	IRQ Number
 * Parameter 2	:	IRQ Priority
 * Return Type	:	none (void)
 * Note		:
 * ------------------------------------------------------------------------------------------------------ */
void USART_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{

}


/* ------------------------------------------------------------------------------------------------------
 * Name		:	USART_IRQHandling
 * Description	:	To Process the interrupt, when occurred:
 *
 * Parameter 1	:	Handle pointer variable
 * Return Type	:	none (void)
 * Note		:
 * ------------------------------------------------------------------------------------------------------ */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{

}


/* ------------------------------------------------------------------------------------------------------
 * Name		:	USART_getFlagStatus
 * Description	:	To get the Flags info from Status Register
 *
 * Parameter 1	:	Base address of the USART peripheral
 * Parameter 2  :   	Flag Name
 * Return Type	:	True or False (1 or 0)
 * Note		:
 * ------------------------------------------------------------------------------------------------------ */
uint8_t USART_getFlagStatus (USART_RegDef_t *pUSARTx, uint32_t FlagName)
{

}


/* ------------------------------------------------------------------------------------------------------
 * Name		:	USART_ClearFlagStatus
 * Description	:	To clear the Flags in Status Register
 *
 * Parameter 1	:	Base address of the USART peripheral
 * Parameter 2  :   	Flag Name
 * Return Type	:	none
 * Note		:
 * ------------------------------------------------------------------------------------------------------ */
void USART_ClearFlagStatus (USART_RegDef_t *pUSARTx, uint32_t FlagName);
{

}
