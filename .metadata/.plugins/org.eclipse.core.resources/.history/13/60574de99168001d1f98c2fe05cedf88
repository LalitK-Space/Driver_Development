
#include "stm32f407xx.h"

#include "stm32f407xx_gpio_drivers.h"

#include "stm32f407xx_spi_drivers.h"

#include <string.h>

#include<stdio.h>

SPI_Handle_t SPI2Handle;

#define MAX_LEN 500

char RCVBuff[MAX_LEN];

char ReadByte;

volatile uint8_t rcvStop = 0;

volatile uint8_t dataAvailabe = 0;

void delay(void)
{
	for(uint32_t i = 0; i < 500000/2 ; i++);
}

void SPI2_GPIO_Init(void)
{
	/* --  Handle variable -- */
	GPIO_Handle_t SPIpins;

	/* -- Port Selection -- */
	SPIpins.pGPIOx 								= GPIOB;			    // PORT B

	// Peripheral Configurations
	SPIpins.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFUNC;	// Mode as Alternate Functionality
	SPIpins.GPIO_PinConfig.GPIO_PinAltFuncMode 	= 5;					// ALT FUNCTION Mode is 5
	SPIpins.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OP_TYPE_PP;		// Push Pull Mode
	SPIpins.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_NO_PUPD;			// No Pull UP/DOWN
	SPIpins.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_SPEED_VERY_HIGH;	// SPEED doesn't matter

	/* -- Pins Configuration -- */
	// PB(15) -> SPI2_MOSI
	SPIpins.GPIO_PinConfig.GPIO_PinNumber		= GPIO_Pin_15;
	GPIO_Init(&SPIpins);


	// PB(14) -> SPI2_MISO
	SPIpins.GPIO_PinConfig.GPIO_PinNumber		= GPIO_Pin_14;
	GPIO_Init(&SPIpins);


	// PB(13) -> SPI2_SCLK
	SPIpins.GPIO_PinConfig.GPIO_PinNumber		= GPIO_Pin_13;
	GPIO_Init(&SPIpins);


	// PB(12) -> SPI2_NSS
	SPIpins.GPIO_PinConfig.GPIO_PinNumber		= GPIO_Pin_12;
	GPIO_Init(&SPIpins);

}

void SPI2_Init(void)
{


	/* -- Base Address of the SPI2 Peripheral -- */
	SPI2Handle.pSPIx							= SPI2;

	/* -- Peripheral Configuration -- */
	SPI2Handle.SPIConfig.SPI_BusConfig			= SPI_BUS_CONFIG_FD;		// Full-Duplex Communication
	SPI2Handle.SPIConfig.SPI_DeviceMOde			= SPI_DEVICE_MODE_MASTER;	// Application is MASTER
	SPI2Handle.SPIConfig.SPI_Speed				= SPI_SCLK_SPEED_DIV_8;		// Max Speed p-clk/8 : SCLK = 2MHz
	SPI2Handle.SPIConfig.SPI_DFF				= SPI_DFF_8BITS;			// 8Bits Data Frame Format
	SPI2Handle.SPIConfig.SPI_COPL				= SPI_CPOL_LOW;				// Default
	SPI2Handle.SPIConfig.SPI_CPHA				= SPI_CPHA_LOW;				// Default
	SPI2Handle.SPIConfig.SPI_SSM				= SPI_SSM_SW_DI;			// Software Slave Select Management Disabled

	/* -- Initialize the SPI Peripheral -- */
	SPI_Init(&SPI2Handle);

}

void Slave_GPIO_InterruptPinInit(void)
{
	GPIO_Handle_t spiIntPin;
	memset(&spiIntPin,0,sizeof(spiIntPin));

	//this is led gpio configuration
	spiIntPin.pGPIOx = GPIOD;
	spiIntPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_Pin_6;
	spiIntPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
	spiIntPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
	spiIntPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;

	GPIO_Init(&spiIntPin);

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI5_9,15);
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI5_9,ENABLE);
}

void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t ApplicationEvent)
{
	static uint32_t i = 0;

	if (ApplicationEvent == SPI_EVENT_RX_COMPLETE)
	{
		RCVBuff[i++] = ReadByte;

		if((ReadByte == '\0') || (i == MAX_LEN))
		{
			rcvStop = 1;
			RCVBuff[i-1] = '\0';
			i = 0;
		}
	}
}

void SPI2_IRQHandler(void)
{
	SPI_IRQHandling(&SPI2Handle);
}

void EXTI9_5_IRQHandler(void)
{
	GPIO_IRQHandling(GPIO_Pin_6);
	dataAvailabe = 1;


int main()
{
	uint8_t dummy = 0xff;

	Slave_GPIO_InterruptPinInit();

	SPI2_GPIO_Init();

	SPI2_Init();

	SPI_SSOEConfig(SPI2, ENABLE);

	SPI_IRQInterruptConfig(IRQ_NO_SPI2, ENABLE);

	while(1)
	{
		rcvStop = 0;

		while(!dataAvailabe);

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI5_9, DISABLE);

		SPI_PeripheralControl(SPI2, ENABLE);


		while(!rcvStop)
		{
			while(SPI_SendData_IT(&SPI2Handle, &dummy, 1) == SPI_BUSY_IN_TX);
			while(SPI_ReceiveData_IT(&SPI2Handle, &ReadByte, 1) == SPI_BUSY_IN_RX);
		}

		while(SPI_getFlagStatus(SPI2, SPI_BUSY_FLAG));


		SPI_PeripheralControl(SPI2, DISABLE);

		printf("Data Received = %s \n", RCVBuff);

		dataAvailabe = 0;

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI5_9, ENABLE);

	}


}


