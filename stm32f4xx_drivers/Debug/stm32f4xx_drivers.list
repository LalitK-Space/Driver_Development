
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006a4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800084c  08000854  00010854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800084c  0800084c  00010854  2**0
                  CONTENTS
  4 .ARM          00000000  0800084c  0800084c  00010854  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800084c  08000854  00010854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800084c  0800084c  0001084c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000850  08000850  00010850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010854  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010854  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a3d  00000000  00000000  00010884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000277  00000000  00000000  000112c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00011538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000098  00000000  00000000  000115f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000169e  00000000  00000000  00011690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000eab  00000000  00000000  00012d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005d72  00000000  00000000  00013bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001994b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000024c  00000000  00000000  0001999c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000834 	.word	0x08000834

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000834 	.word	0x08000834

080001e8 <main>:
// Just to observe the toggling
void softDelay(void);


int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpio_led;

	/* -- Now, initialize the structure variable -- */

	// Select Port
	gpio_led.pGPIOx = GPIOD;
 80001ee:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <main+0x3c>)
 80001f0:	607b      	str	r3, [r7, #4]

	// Pin Configuration: PIN NUMBER
	gpio_led.GPIO_PinConfig.GPIO_PinNumber = GPIO_Pin_12;
 80001f2:	230c      	movs	r3, #12
 80001f4:	723b      	strb	r3, [r7, #8]

	// Pin Configuration: PIN MODE
	gpio_led.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80001f6:	2301      	movs	r3, #1
 80001f8:	727b      	strb	r3, [r7, #9]

	// Pin Configuration: GPIO SPEED (Not important in this case)
	gpio_led.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERY_HIGH;
 80001fa:	2303      	movs	r3, #3
 80001fc:	72bb      	strb	r3, [r7, #10]

	// Pin Configuration: OUTPUT TYPE (Selected -> PUSH-PULL)
	gpio_led.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001fe:	2300      	movs	r3, #0
 8000200:	733b      	strb	r3, [r7, #12]

	// Pin Configuration: PU-PD Configuration (Selected -> NO PU PD)
	gpio_led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000202:	2300      	movs	r3, #0
 8000204:	72fb      	strb	r3, [r7, #11]

	/* -- Before Calling GPIO Init, Enable Peripheral Clock -- */
	GPIO_PeriClockControl(GPIOD, ENABLE);
 8000206:	2101      	movs	r1, #1
 8000208:	4806      	ldr	r0, [pc, #24]	; (8000224 <main+0x3c>)
 800020a:	f000 f84d 	bl	80002a8 <GPIO_PeriClockControl>

	/* -- Call GPIO Initialization Function and pass address of handle variable as input argument -- */
	GPIO_Init(&gpio_led);
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	4618      	mov	r0, r3
 8000212:	f000 f935 	bl	8000480 <GPIO_Init>

	/* -- REQUIRED Configurations are done -- */
	// Toggle LED
	while(1)
	{
		GPIO_ToggleOutputPin(GPIOD, GPIO_Pin_12);
 8000216:	210c      	movs	r1, #12
 8000218:	4802      	ldr	r0, [pc, #8]	; (8000224 <main+0x3c>)
 800021a:	f000 fad1 	bl	80007c0 <GPIO_ToggleOutputPin>
		softDelay();
 800021e:	f000 f803 	bl	8000228 <softDelay>
		GPIO_ToggleOutputPin(GPIOD, GPIO_Pin_12);
 8000222:	e7f8      	b.n	8000216 <main+0x2e>
 8000224:	40020c00 	.word	0x40020c00

08000228 <softDelay>:
}


/* -- Software Delay Implementation -- */
void softDelay(void)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 800022e:	2300      	movs	r3, #0
 8000230:	607b      	str	r3, [r7, #4]
 8000232:	e002      	b.n	800023a <softDelay+0x12>
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3301      	adds	r3, #1
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4a04      	ldr	r2, [pc, #16]	; (8000250 <softDelay+0x28>)
 800023e:	4293      	cmp	r3, r2
 8000240:	d9f8      	bls.n	8000234 <softDelay+0xc>
}
 8000242:	bf00      	nop
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	0007a11f 	.word	0x0007a11f

08000254 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000254:	480d      	ldr	r0, [pc, #52]	; (800028c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000256:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000258:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800025c:	480c      	ldr	r0, [pc, #48]	; (8000290 <LoopForever+0x6>)
  ldr r1, =_edata
 800025e:	490d      	ldr	r1, [pc, #52]	; (8000294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000260:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <LoopForever+0xe>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000264:	e002      	b.n	800026c <LoopCopyDataInit>

08000266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026a:	3304      	adds	r3, #4

0800026c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800026c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000270:	d3f9      	bcc.n	8000266 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000272:	4a0a      	ldr	r2, [pc, #40]	; (800029c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000274:	4c0a      	ldr	r4, [pc, #40]	; (80002a0 <LoopForever+0x16>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000278:	e001      	b.n	800027e <LoopFillZerobss>

0800027a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800027c:	3204      	adds	r2, #4

0800027e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000280:	d3fb      	bcc.n	800027a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000282:	f000 fab3 	bl	80007ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000286:	f7ff ffaf 	bl	80001e8 <main>

0800028a <LoopForever>:

LoopForever:
    b LoopForever
 800028a:	e7fe      	b.n	800028a <LoopForever>
  ldr   r0, =_estack
 800028c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000294:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000298:	08000854 	.word	0x08000854
  ldr r2, =_sbss
 800029c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a0:	2000001c 	.word	0x2000001c

080002a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a4:	e7fe      	b.n	80002a4 <ADC_IRQHandler>
	...

080002a8 <GPIO_PeriClockControl>:
 * Parameter 2	:	ENABLE or DISABLE Macro
 * Return Type	:	none (void)
 * Note			:	none
 * ------------------------------------------------------------------------------------------------------ */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 80002b4:	78fb      	ldrb	r3, [r7, #3]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d162      	bne.n	8000380 <GPIO_PeriClockControl+0xd8>
	{
		if (pGPIOx == GPIOA)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a66      	ldr	r2, [pc, #408]	; (8000458 <GPIO_PeriClockControl+0x1b0>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d106      	bne.n	80002d0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80002c2:	4b66      	ldr	r3, [pc, #408]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c6:	4a65      	ldr	r2, [pc, #404]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6313      	str	r3, [r2, #48]	; 0x30
				// MEh
			}
		}

	}
}
 80002ce:	e0bc      	b.n	800044a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a63      	ldr	r2, [pc, #396]	; (8000460 <GPIO_PeriClockControl+0x1b8>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d106      	bne.n	80002e6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002d8:	4b60      	ldr	r3, [pc, #384]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 80002da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002dc:	4a5f      	ldr	r2, [pc, #380]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 80002de:	f043 0302 	orr.w	r3, r3, #2
 80002e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e4:	e0b1      	b.n	800044a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a5e      	ldr	r2, [pc, #376]	; (8000464 <GPIO_PeriClockControl+0x1bc>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002ee:	4b5b      	ldr	r3, [pc, #364]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 80002f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f2:	4a5a      	ldr	r2, [pc, #360]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 80002f4:	f043 0304 	orr.w	r3, r3, #4
 80002f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002fa:	e0a6      	b.n	800044a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a5a      	ldr	r2, [pc, #360]	; (8000468 <GPIO_PeriClockControl+0x1c0>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000304:	4b55      	ldr	r3, [pc, #340]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 8000306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000308:	4a54      	ldr	r2, [pc, #336]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 800030a:	f043 0308 	orr.w	r3, r3, #8
 800030e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000310:	e09b      	b.n	800044a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a55      	ldr	r2, [pc, #340]	; (800046c <GPIO_PeriClockControl+0x1c4>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800031a:	4b50      	ldr	r3, [pc, #320]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031e:	4a4f      	ldr	r2, [pc, #316]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 8000320:	f043 0310 	orr.w	r3, r3, #16
 8000324:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000326:	e090      	b.n	800044a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a51      	ldr	r2, [pc, #324]	; (8000470 <GPIO_PeriClockControl+0x1c8>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d106      	bne.n	800033e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000330:	4b4a      	ldr	r3, [pc, #296]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a49      	ldr	r2, [pc, #292]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 8000336:	f043 0320 	orr.w	r3, r3, #32
 800033a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033c:	e085      	b.n	800044a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a4c      	ldr	r2, [pc, #304]	; (8000474 <GPIO_PeriClockControl+0x1cc>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000346:	4b45      	ldr	r3, [pc, #276]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	4a44      	ldr	r2, [pc, #272]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 800034c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000350:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000352:	e07a      	b.n	800044a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a48      	ldr	r2, [pc, #288]	; (8000478 <GPIO_PeriClockControl+0x1d0>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800035c:	4b3f      	ldr	r3, [pc, #252]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000360:	4a3e      	ldr	r2, [pc, #248]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 8000362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000366:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000368:	e06f      	b.n	800044a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a43      	ldr	r2, [pc, #268]	; (800047c <GPIO_PeriClockControl+0x1d4>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d16b      	bne.n	800044a <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 8000372:	4b3a      	ldr	r3, [pc, #232]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000376:	4a39      	ldr	r2, [pc, #228]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 8000378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800037c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037e:	e064      	b.n	800044a <GPIO_PeriClockControl+0x1a2>
		if (EnorDi == DISABLE)
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d161      	bne.n	800044a <GPIO_PeriClockControl+0x1a2>
			if (pGPIOx == GPIOA)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a33      	ldr	r2, [pc, #204]	; (8000458 <GPIO_PeriClockControl+0x1b0>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d106      	bne.n	800039c <GPIO_PeriClockControl+0xf4>
				GPIOA_PCLK_DI();
 800038e:	4b33      	ldr	r3, [pc, #204]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000392:	4a32      	ldr	r2, [pc, #200]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 8000394:	f023 0301 	bic.w	r3, r3, #1
 8000398:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039a:	e056      	b.n	800044a <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOB)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a30      	ldr	r2, [pc, #192]	; (8000460 <GPIO_PeriClockControl+0x1b8>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <GPIO_PeriClockControl+0x10a>
				GPIOB_PCLK_DI();
 80003a4:	4b2d      	ldr	r3, [pc, #180]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a8:	4a2c      	ldr	r2, [pc, #176]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 80003aa:	f023 0302 	bic.w	r3, r3, #2
 80003ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b0:	e04b      	b.n	800044a <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOC)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a2b      	ldr	r2, [pc, #172]	; (8000464 <GPIO_PeriClockControl+0x1bc>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d106      	bne.n	80003c8 <GPIO_PeriClockControl+0x120>
				GPIOC_PCLK_DI();
 80003ba:	4b28      	ldr	r3, [pc, #160]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003be:	4a27      	ldr	r2, [pc, #156]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 80003c0:	f023 0304 	bic.w	r3, r3, #4
 80003c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c6:	e040      	b.n	800044a <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOD)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a27      	ldr	r2, [pc, #156]	; (8000468 <GPIO_PeriClockControl+0x1c0>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d106      	bne.n	80003de <GPIO_PeriClockControl+0x136>
				GPIOD_PCLK_DI();
 80003d0:	4b22      	ldr	r3, [pc, #136]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a21      	ldr	r2, [pc, #132]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 80003d6:	f023 0308 	bic.w	r3, r3, #8
 80003da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003dc:	e035      	b.n	800044a <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOE)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a22      	ldr	r2, [pc, #136]	; (800046c <GPIO_PeriClockControl+0x1c4>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d106      	bne.n	80003f4 <GPIO_PeriClockControl+0x14c>
				GPIOE_PCLK_DI();
 80003e6:	4b1d      	ldr	r3, [pc, #116]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 80003e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ea:	4a1c      	ldr	r2, [pc, #112]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 80003ec:	f023 0310 	bic.w	r3, r3, #16
 80003f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f2:	e02a      	b.n	800044a <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOF)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a1e      	ldr	r2, [pc, #120]	; (8000470 <GPIO_PeriClockControl+0x1c8>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d106      	bne.n	800040a <GPIO_PeriClockControl+0x162>
				GPIOF_PCLK_DI();
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 80003fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000400:	4a16      	ldr	r2, [pc, #88]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 8000402:	f023 0320 	bic.w	r3, r3, #32
 8000406:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000408:	e01f      	b.n	800044a <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOG)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a19      	ldr	r2, [pc, #100]	; (8000474 <GPIO_PeriClockControl+0x1cc>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d106      	bne.n	8000420 <GPIO_PeriClockControl+0x178>
				GPIOG_PCLK_EN();
 8000412:	4b12      	ldr	r3, [pc, #72]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 8000414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000416:	4a11      	ldr	r2, [pc, #68]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 8000418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800041c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041e:	e014      	b.n	800044a <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOH)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a15      	ldr	r2, [pc, #84]	; (8000478 <GPIO_PeriClockControl+0x1d0>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d106      	bne.n	8000436 <GPIO_PeriClockControl+0x18e>
				GPIOH_PCLK_DI();
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4a0b      	ldr	r2, [pc, #44]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 800042e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000432:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000434:	e009      	b.n	800044a <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOI)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a10      	ldr	r2, [pc, #64]	; (800047c <GPIO_PeriClockControl+0x1d4>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d105      	bne.n	800044a <GPIO_PeriClockControl+0x1a2>
				GPIOI_PCLK_DI();
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 8000440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000442:	4a06      	ldr	r2, [pc, #24]	; (800045c <GPIO_PeriClockControl+0x1b4>)
 8000444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000448:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40020000 	.word	0x40020000
 800045c:	40023800 	.word	0x40023800
 8000460:	40020400 	.word	0x40020400
 8000464:	40020800 	.word	0x40020800
 8000468:	40020c00 	.word	0x40020c00
 800046c:	40021000 	.word	0x40021000
 8000470:	40021400 	.word	0x40021400
 8000474:	40021800 	.word	0x40021800
 8000478:	40021c00 	.word	0x40021c00
 800047c:	40022000 	.word	0x40022000

08000480 <GPIO_Init>:
 * Parameter 1	:
 * Return Type	:	none (void)
 * Note			:	Peripheral Clock is enabled at starting of the function, so users need not do it explicitly.
 * ------------------------------------------------------------------------------------------------------ */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	// Enable Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2101      	movs	r1, #1
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff ff0a 	bl	80002a8 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]

	// ->  1. Configure the GPIO pin Mode

	// As defined in x_gpio_drivers.h, Pin Modes greater than 3 are interrupt modes
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	795b      	ldrb	r3, [r3, #5]
 800049c:	2b03      	cmp	r3, #3
 800049e:	d821      	bhi.n	80004e4 <GPIO_Init+0x64>
	{
		// In Pin Mode Register, each pin takes 2 bit fields [Shift value according to pin number]
		// Logic: Mode value left shifter by (2 * pin number)
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	795b      	ldrb	r3, [r3, #5]
 80004a4:	461a      	mov	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	791b      	ldrb	r3, [r3, #4]
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	fa02 f303 	lsl.w	r3, r2, r3
 80004b0:	617b      	str	r3, [r7, #20]

		// Store 'temp' i.e. Mode Value in MODE Register [Set/touch only required bit leave rest untouched '|']
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear required bits
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	791b      	ldrb	r3, [r3, #4]
 80004bc:	4619      	mov	r1, r3
 80004be:	2303      	movs	r3, #3
 80004c0:	408b      	lsls	r3, r1
 80004c2:	43db      	mvns	r3, r3
 80004c4:	4619      	mov	r1, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	400a      	ands	r2, r1
 80004cc:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;													// Update required bits
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	6819      	ldr	r1, [r3, #0]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	697a      	ldr	r2, [r7, #20]
 80004da:	430a      	orrs	r2, r1
 80004dc:	601a      	str	r2, [r3, #0]

		// Reset 'temp'
		temp = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	617b      	str	r3, [r7, #20]
 80004e2:	e0ca      	b.n	800067a <GPIO_Init+0x1fa>
		 * 6. Enable interrupt reception on that IRQ number [NVIC Registers]
		 * 7. Implement the IRQ handler.
		 * */

		// -> Configure the edge trigger
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	795b      	ldrb	r3, [r3, #5]
 80004e8:	2b04      	cmp	r3, #4
 80004ea:	d117      	bne.n	800051c <GPIO_Init+0x9c>
		{
			// Configure the Falling Trigger Selection Register (FTSR)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ec:	4b4a      	ldr	r3, [pc, #296]	; (8000618 <GPIO_Init+0x198>)
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	7912      	ldrb	r2, [r2, #4]
 80004f4:	4611      	mov	r1, r2
 80004f6:	2201      	movs	r2, #1
 80004f8:	408a      	lsls	r2, r1
 80004fa:	4611      	mov	r1, r2
 80004fc:	4a46      	ldr	r2, [pc, #280]	; (8000618 <GPIO_Init+0x198>)
 80004fe:	430b      	orrs	r3, r1
 8000500:	60d3      	str	r3, [r2, #12]

			// As a safe side, Clear same bit in RTSR so just FTSR is configured
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000502:	4b45      	ldr	r3, [pc, #276]	; (8000618 <GPIO_Init+0x198>)
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	7912      	ldrb	r2, [r2, #4]
 800050a:	4611      	mov	r1, r2
 800050c:	2201      	movs	r2, #1
 800050e:	408a      	lsls	r2, r1
 8000510:	43d2      	mvns	r2, r2
 8000512:	4611      	mov	r1, r2
 8000514:	4a40      	ldr	r2, [pc, #256]	; (8000618 <GPIO_Init+0x198>)
 8000516:	400b      	ands	r3, r1
 8000518:	6093      	str	r3, [r2, #8]
 800051a:	e035      	b.n	8000588 <GPIO_Init+0x108>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	795b      	ldrb	r3, [r3, #5]
 8000520:	2b05      	cmp	r3, #5
 8000522:	d117      	bne.n	8000554 <GPIO_Init+0xd4>
		{
			// Configure the Rising Trigger Selection Register (RTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000524:	4b3c      	ldr	r3, [pc, #240]	; (8000618 <GPIO_Init+0x198>)
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	7912      	ldrb	r2, [r2, #4]
 800052c:	4611      	mov	r1, r2
 800052e:	2201      	movs	r2, #1
 8000530:	408a      	lsls	r2, r1
 8000532:	4611      	mov	r1, r2
 8000534:	4a38      	ldr	r2, [pc, #224]	; (8000618 <GPIO_Init+0x198>)
 8000536:	430b      	orrs	r3, r1
 8000538:	6093      	str	r3, [r2, #8]

			// As a safe side, Clear same bit in FTSR so just RTSR is configured
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800053a:	4b37      	ldr	r3, [pc, #220]	; (8000618 <GPIO_Init+0x198>)
 800053c:	68db      	ldr	r3, [r3, #12]
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	7912      	ldrb	r2, [r2, #4]
 8000542:	4611      	mov	r1, r2
 8000544:	2201      	movs	r2, #1
 8000546:	408a      	lsls	r2, r1
 8000548:	43d2      	mvns	r2, r2
 800054a:	4611      	mov	r1, r2
 800054c:	4a32      	ldr	r2, [pc, #200]	; (8000618 <GPIO_Init+0x198>)
 800054e:	400b      	ands	r3, r1
 8000550:	60d3      	str	r3, [r2, #12]
 8000552:	e019      	b.n	8000588 <GPIO_Init+0x108>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	795b      	ldrb	r3, [r3, #5]
 8000558:	2b06      	cmp	r3, #6
 800055a:	d115      	bne.n	8000588 <GPIO_Init+0x108>
		{
			// Configure the both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800055c:	4b2e      	ldr	r3, [pc, #184]	; (8000618 <GPIO_Init+0x198>)
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	7912      	ldrb	r2, [r2, #4]
 8000564:	4611      	mov	r1, r2
 8000566:	2201      	movs	r2, #1
 8000568:	408a      	lsls	r2, r1
 800056a:	4611      	mov	r1, r2
 800056c:	4a2a      	ldr	r2, [pc, #168]	; (8000618 <GPIO_Init+0x198>)
 800056e:	430b      	orrs	r3, r1
 8000570:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000572:	4b29      	ldr	r3, [pc, #164]	; (8000618 <GPIO_Init+0x198>)
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	7912      	ldrb	r2, [r2, #4]
 800057a:	4611      	mov	r1, r2
 800057c:	2201      	movs	r2, #1
 800057e:	408a      	lsls	r2, r1
 8000580:	4611      	mov	r1, r2
 8000582:	4a25      	ldr	r2, [pc, #148]	; (8000618 <GPIO_Init+0x198>)
 8000584:	430b      	orrs	r3, r1
 8000586:	6093      	str	r3, [r2, #8]
		// -> Configure the GPIO Port Selection in SYSCFG_EXTICR
		// GPIO_Pin_x of WHICH port is delivering interrupt? decided by GPIO Port selection [By default, PORTA]

		uint8_t SYSArrayIndex, SYSBitField;

		SYSArrayIndex = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) / 4;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	791b      	ldrb	r3, [r3, #4]
 800058c:	089b      	lsrs	r3, r3, #2
 800058e:	74fb      	strb	r3, [r7, #19]
		SYSBitField	  = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 4;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	f003 0303 	and.w	r3, r3, #3
 8000598:	74bb      	strb	r3, [r7, #18]

		// Now store the Port Code
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a1f      	ldr	r2, [pc, #124]	; (800061c <GPIO_Init+0x19c>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d04d      	beq.n	8000640 <GPIO_Init+0x1c0>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a1d      	ldr	r2, [pc, #116]	; (8000620 <GPIO_Init+0x1a0>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d032      	beq.n	8000614 <GPIO_Init+0x194>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a1c      	ldr	r2, [pc, #112]	; (8000624 <GPIO_Init+0x1a4>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d02b      	beq.n	8000610 <GPIO_Init+0x190>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <GPIO_Init+0x1a8>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d024      	beq.n	800060c <GPIO_Init+0x18c>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a19      	ldr	r2, [pc, #100]	; (800062c <GPIO_Init+0x1ac>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d01d      	beq.n	8000608 <GPIO_Init+0x188>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a17      	ldr	r2, [pc, #92]	; (8000630 <GPIO_Init+0x1b0>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d016      	beq.n	8000604 <GPIO_Init+0x184>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a16      	ldr	r2, [pc, #88]	; (8000634 <GPIO_Init+0x1b4>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d00f      	beq.n	8000600 <GPIO_Init+0x180>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a14      	ldr	r2, [pc, #80]	; (8000638 <GPIO_Init+0x1b8>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d008      	beq.n	80005fc <GPIO_Init+0x17c>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <GPIO_Init+0x1bc>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d101      	bne.n	80005f8 <GPIO_Init+0x178>
 80005f4:	2308      	movs	r3, #8
 80005f6:	e024      	b.n	8000642 <GPIO_Init+0x1c2>
 80005f8:	2300      	movs	r3, #0
 80005fa:	e022      	b.n	8000642 <GPIO_Init+0x1c2>
 80005fc:	2307      	movs	r3, #7
 80005fe:	e020      	b.n	8000642 <GPIO_Init+0x1c2>
 8000600:	2306      	movs	r3, #6
 8000602:	e01e      	b.n	8000642 <GPIO_Init+0x1c2>
 8000604:	2305      	movs	r3, #5
 8000606:	e01c      	b.n	8000642 <GPIO_Init+0x1c2>
 8000608:	2304      	movs	r3, #4
 800060a:	e01a      	b.n	8000642 <GPIO_Init+0x1c2>
 800060c:	2303      	movs	r3, #3
 800060e:	e018      	b.n	8000642 <GPIO_Init+0x1c2>
 8000610:	2302      	movs	r3, #2
 8000612:	e016      	b.n	8000642 <GPIO_Init+0x1c2>
 8000614:	2301      	movs	r3, #1
 8000616:	e014      	b.n	8000642 <GPIO_Init+0x1c2>
 8000618:	40013c00 	.word	0x40013c00
 800061c:	40020000 	.word	0x40020000
 8000620:	40020400 	.word	0x40020400
 8000624:	40020800 	.word	0x40020800
 8000628:	40020c00 	.word	0x40020c00
 800062c:	40021000 	.word	0x40021000
 8000630:	40021400 	.word	0x40021400
 8000634:	40021800 	.word	0x40021800
 8000638:	40021c00 	.word	0x40021c00
 800063c:	40022000 	.word	0x40022000
 8000640:	2300      	movs	r3, #0
 8000642:	747b      	strb	r3, [r7, #17]
		SYSCFG_EN();												   // Clock Enable
 8000644:	4b5b      	ldr	r3, [pc, #364]	; (80007b4 <GPIO_Init+0x334>)
 8000646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000648:	4a5a      	ldr	r2, [pc, #360]	; (80007b4 <GPIO_Init+0x334>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[SYSArrayIndex] = portcode << (SYSBitField * 4); // before configuring, enable clock
 8000650:	7c7a      	ldrb	r2, [r7, #17]
 8000652:	7cbb      	ldrb	r3, [r7, #18]
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	fa02 f103 	lsl.w	r1, r2, r3
 800065a:	4a57      	ldr	r2, [pc, #348]	; (80007b8 <GPIO_Init+0x338>)
 800065c:	7cfb      	ldrb	r3, [r7, #19]
 800065e:	3302      	adds	r3, #2
 8000660:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// -> Enable EXTI Interrupt delivery using Interrupt Mask Register
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000664:	4b55      	ldr	r3, [pc, #340]	; (80007bc <GPIO_Init+0x33c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	7912      	ldrb	r2, [r2, #4]
 800066c:	4611      	mov	r1, r2
 800066e:	2201      	movs	r2, #1
 8000670:	408a      	lsls	r2, r1
 8000672:	4611      	mov	r1, r2
 8000674:	4a51      	ldr	r2, [pc, #324]	; (80007bc <GPIO_Init+0x33c>)
 8000676:	430b      	orrs	r3, r1
 8000678:	6013      	str	r3, [r2, #0]
	}

	// -> 2. Configure the GPIO Speed

	// Logic: Speed value left shifted by 2 * pin number
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	799b      	ldrb	r3, [r3, #6]
 800067e:	461a      	mov	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear required bits
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	4619      	mov	r1, r3
 8000698:	2303      	movs	r3, #3
 800069a:	408b      	lsls	r3, r1
 800069c:	43db      	mvns	r3, r3
 800069e:	4619      	mov	r1, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	400a      	ands	r2, r1
 80006a6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;												  // Update required bits
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6899      	ldr	r1, [r3, #8]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	697a      	ldr	r2, [r7, #20]
 80006b4:	430a      	orrs	r2, r1
 80006b6:	609a      	str	r2, [r3, #8]

	// Reset 'temp'
	temp = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]

	// -> 3. Configure the Pull-up and Pull-down setting

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	79db      	ldrb	r3, [r3, #7]
 80006c0:	461a      	mov	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	791b      	ldrb	r3, [r3, #4]
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	fa02 f303 	lsl.w	r3, r2, r3
 80006cc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear required bits
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	68da      	ldr	r2, [r3, #12]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	791b      	ldrb	r3, [r3, #4]
 80006d8:	4619      	mov	r1, r3
 80006da:	2303      	movs	r3, #3
 80006dc:	408b      	lsls	r3, r1
 80006de:	43db      	mvns	r3, r3
 80006e0:	4619      	mov	r1, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	400a      	ands	r2, r1
 80006e8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	68d9      	ldr	r1, [r3, #12]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	697a      	ldr	r2, [r7, #20]
 80006f6:	430a      	orrs	r2, r1
 80006f8:	60da      	str	r2, [r3, #12]

	temp = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]

	// -> 4. Configure the GPIO Output type

	// Each Pin takes only 1 bit field thats why (1 * pin number)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	7a1b      	ldrb	r3, [r3, #8]
 8000702:	461a      	mov	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	791b      	ldrb	r3, [r3, #4]
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear required bits
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	685a      	ldr	r2, [r3, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	791b      	ldrb	r3, [r3, #4]
 8000718:	4619      	mov	r1, r3
 800071a:	2301      	movs	r3, #1
 800071c:	408b      	lsls	r3, r1
 800071e:	43db      	mvns	r3, r3
 8000720:	4619      	mov	r1, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	400a      	ands	r2, r1
 8000728:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	6859      	ldr	r1, [r3, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	697a      	ldr	r2, [r7, #20]
 8000736:	430a      	orrs	r2, r1
 8000738:	605a      	str	r2, [r3, #4]

	temp = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]

	// -> 5. Configure the Alternate Functionality

	// If mode is selected as Alternate Function then only configure for Alternate Functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUNC)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	795b      	ldrb	r3, [r3, #5]
 8000742:	2b02      	cmp	r3, #2
 8000744:	d131      	bne.n	80007aa <GPIO_Init+0x32a>
		//      : then, to get Bit position (y = (pin_number % 8))
		//		AF[x] = alt_fnc_value  << (4 * y)

		uint8_t AFarrayIndex, AFbitField;

		AFarrayIndex = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	08db      	lsrs	r3, r3, #3
 800074c:	743b      	strb	r3, [r7, #16]
		AFbitField	 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	791b      	ldrb	r3, [r3, #4]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[AFarrayIndex] &= ~(0xF << (4 * AFbitField));					// Clear required Bits
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	7c3a      	ldrb	r2, [r7, #16]
 800075e:	3208      	adds	r2, #8
 8000760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	220f      	movs	r2, #15
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43db      	mvns	r3, r3
 8000770:	4618      	mov	r0, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	7c3a      	ldrb	r2, [r7, #16]
 8000778:	4001      	ands	r1, r0
 800077a:	3208      	adds	r2, #8
 800077c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[AFarrayIndex] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * AFbitField);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	7c3a      	ldrb	r2, [r7, #16]
 8000786:	3208      	adds	r2, #8
 8000788:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	7a5b      	ldrb	r3, [r3, #9]
 8000790:	461a      	mov	r2, r3
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	4618      	mov	r0, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	7c3a      	ldrb	r2, [r7, #16]
 80007a2:	4301      	orrs	r1, r0
 80007a4:	3208      	adds	r2, #8
 80007a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40013800 	.word	0x40013800
 80007bc:	40013c00 	.word	0x40013c00

080007c0 <GPIO_ToggleOutputPin>:
 * Parameter 2	: 	Pin Number to toggle
 * Return Type	:	none (void)
 * Note			:	none
 * ------------------------------------------------------------------------------------------------------ */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	695b      	ldr	r3, [r3, #20]
 80007d0:	78fa      	ldrb	r2, [r7, #3]
 80007d2:	2101      	movs	r1, #1
 80007d4:	fa01 f202 	lsl.w	r2, r1, r2
 80007d8:	405a      	eors	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	615a      	str	r2, [r3, #20]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
	...

080007ec <__libc_init_array>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	4d0d      	ldr	r5, [pc, #52]	; (8000824 <__libc_init_array+0x38>)
 80007f0:	4c0d      	ldr	r4, [pc, #52]	; (8000828 <__libc_init_array+0x3c>)
 80007f2:	1b64      	subs	r4, r4, r5
 80007f4:	10a4      	asrs	r4, r4, #2
 80007f6:	2600      	movs	r6, #0
 80007f8:	42a6      	cmp	r6, r4
 80007fa:	d109      	bne.n	8000810 <__libc_init_array+0x24>
 80007fc:	4d0b      	ldr	r5, [pc, #44]	; (800082c <__libc_init_array+0x40>)
 80007fe:	4c0c      	ldr	r4, [pc, #48]	; (8000830 <__libc_init_array+0x44>)
 8000800:	f000 f818 	bl	8000834 <_init>
 8000804:	1b64      	subs	r4, r4, r5
 8000806:	10a4      	asrs	r4, r4, #2
 8000808:	2600      	movs	r6, #0
 800080a:	42a6      	cmp	r6, r4
 800080c:	d105      	bne.n	800081a <__libc_init_array+0x2e>
 800080e:	bd70      	pop	{r4, r5, r6, pc}
 8000810:	f855 3b04 	ldr.w	r3, [r5], #4
 8000814:	4798      	blx	r3
 8000816:	3601      	adds	r6, #1
 8000818:	e7ee      	b.n	80007f8 <__libc_init_array+0xc>
 800081a:	f855 3b04 	ldr.w	r3, [r5], #4
 800081e:	4798      	blx	r3
 8000820:	3601      	adds	r6, #1
 8000822:	e7f2      	b.n	800080a <__libc_init_array+0x1e>
 8000824:	0800084c 	.word	0x0800084c
 8000828:	0800084c 	.word	0x0800084c
 800082c:	0800084c 	.word	0x0800084c
 8000830:	08000850 	.word	0x08000850

08000834 <_init>:
 8000834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000836:	bf00      	nop
 8000838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800083a:	bc08      	pop	{r3}
 800083c:	469e      	mov	lr, r3
 800083e:	4770      	bx	lr

08000840 <_fini>:
 8000840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000842:	bf00      	nop
 8000844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000846:	bc08      	pop	{r3}
 8000848:	469e      	mov	lr, r3
 800084a:	4770      	bx	lr
