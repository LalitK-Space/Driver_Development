
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bcc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d74  08000d7c  00010d7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d74  08000d74  00010d7c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d74  08000d74  00010d7c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d74  08000d7c  00010d7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d74  08000d74  00010d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d78  08000d78  00010d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010d7c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010d7c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001697  00000000  00000000  00010dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004c6  00000000  00000000  00012443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b8  00000000  00000000  00012910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000180  00000000  00000000  00012ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020bf  00000000  00000000  00012c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a3f  00000000  00000000  00014d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009239  00000000  00000000  00016746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001f97f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000690  00000000  00000000  0001f9d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000d5c 	.word	0x08000d5c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000d5c 	.word	0x08000d5c

080001e8 <main>:
/* ---------------------------- LED CODE -------------------------------------- */

/* -----------------------------^ LED CODE ^------------------------------------ */

int main()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
	/* -- Configure GPIOs Alternate Functionality as SPI Peripheral -- */
	SPI2_GPIO_Init();
 80001ee:	f000 f855 	bl	800029c <SPI2_GPIO_Init>

	/* -- Configure SPI2 Peripheral -- */
	SPI2_Init();
 80001f2:	f000 f881 	bl	80002f8 <SPI2_Init>

	/* -- GPIO Button Init -- */
	GPIO_buttonInit();
 80001f6:	f000 f89d 	bl	8000334 <GPIO_buttonInit>

	/* -- SSOE Configuration -- */
	// NSS output Enable -> Please refer to the function description
	SPI_SSOEConfig(SPI2, ENABLE);
 80001fa:	2101      	movs	r1, #1
 80001fc:	4825      	ldr	r0, [pc, #148]	; (8000294 <main+0xac>)
 80001fe:	f000 fd6c 	bl	8000cda <SPI_SSOEConfig>

	/* -- Dummy Data -- */
	uint8_t dummyWrite = 0x11;
 8000202:	2311      	movs	r3, #17
 8000204:	71fb      	strb	r3, [r7, #7]
	uint8_t dummyRead;
/* ---------------------------- LED CODE -------------------------------------- */
	led_init_all();
 8000206:	f000 f8c3 	bl	8000390 <led_init_all>

	/* -- Data is transmitted only when button is pressed -- */
	while (1)
	{
		/* -- Wait till button is pressed -- */
		while ( !(GPIO_ReadFromInputPin(GPIOA, GPIO_Pin_0)));							// hang here until button is pressed
 800020a:	bf00      	nop
 800020c:	2100      	movs	r1, #0
 800020e:	4822      	ldr	r0, [pc, #136]	; (8000298 <main+0xb0>)
 8000210:	f000 fbe0 	bl	80009d4 <GPIO_ReadFromInputPin>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d0f8      	beq.n	800020c <main+0x24>

		/* -- For De-bouncing -- */
		softDelay();
 800021a:	f000 f8a3 	bl	8000364 <softDelay>

		/* -- NOW, Enable SPI and Send Data -- */

		/* -- Now, Enable the SPI (SPI Peripheral is disabled by default)-- */
		// MUST BE ENABLED AFTER ALL THE REQUIRED CONFIGURATIONS ARE DONE
		SPI_PeripheralControl(SPI2,ENABLE);
 800021e:	2101      	movs	r1, #1
 8000220:	481c      	ldr	r0, [pc, #112]	; (8000294 <main+0xac>)
 8000222:	f000 fd3e 	bl	8000ca2 <SPI_PeripheralControl>

		/* -- Send Data -- */

		// Test Data
		uint8_t toArduino = 0xF1;	// F1 - F5		// Data to send
 8000226:	23f1      	movs	r3, #241	; 0xf1
 8000228:	717b      	strb	r3, [r7, #5]
		uint8_t ackBytefromSlave;	// ACK Byte
/* -- ------------------------------------------------------------------------ -- */
		// SEND DATA
		SPI_SendData(SPI2,&toArduino, 1);
 800022a:	1d7b      	adds	r3, r7, #5
 800022c:	2201      	movs	r2, #1
 800022e:	4619      	mov	r1, r3
 8000230:	4818      	ldr	r0, [pc, #96]	; (8000294 <main+0xac>)
 8000232:	f000 fcb4 	bl	8000b9e <SPI_SendData>

		// DUMMY READ
		SPI_ReceiveData(SPI2, &dummyRead, 1);
 8000236:	1dbb      	adds	r3, r7, #6
 8000238:	2201      	movs	r2, #1
 800023a:	4619      	mov	r1, r3
 800023c:	4815      	ldr	r0, [pc, #84]	; (8000294 <main+0xac>)
 800023e:	f000 fce5 	bl	8000c0c <SPI_ReceiveData>

		// SEND DUMMY BYTES TO RECEIVE RESPONSE
		SPI_SendData(SPI2,&dummyWrite, 1);
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	2201      	movs	r2, #1
 8000246:	4619      	mov	r1, r3
 8000248:	4812      	ldr	r0, [pc, #72]	; (8000294 <main+0xac>)
 800024a:	f000 fca8 	bl	8000b9e <SPI_SendData>

		// READ ACTUAL DATA (ACK BYTE FROM SLAVE)
		SPI_ReceiveData(SPI2, &ackBytefromSlave, 1);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2201      	movs	r2, #1
 8000252:	4619      	mov	r1, r3
 8000254:	480f      	ldr	r0, [pc, #60]	; (8000294 <main+0xac>)
 8000256:	f000 fcd9 	bl	8000c0c <SPI_ReceiveData>
/* -- ------------------------------------------------------------------------ -- */
		if (ackBytefromSlave == (uint8_t)0xFF)
 800025a:	793b      	ldrb	r3, [r7, #4]
 800025c:	2bff      	cmp	r3, #255	; 0xff
 800025e:	d10b      	bne.n	8000278 <main+0x90>
		{
			led_on(15);
 8000260:	200f      	movs	r0, #15
 8000262:	f000 f8cf 	bl	8000404 <led_on>

			led_on(14);
 8000266:	200e      	movs	r0, #14
 8000268:	f000 f8cc 	bl	8000404 <led_on>

			led_on(13);
 800026c:	200d      	movs	r0, #13
 800026e:	f000 f8c9 	bl	8000404 <led_on>

			led_on(12);
 8000272:	200c      	movs	r0, #12
 8000274:	f000 f8c6 	bl	8000404 <led_on>
		}


		/* -- Before Disabling the SPI, ensure all the Data is sent (check BSY Flag in SR)*/
		while (SPI_getFlagStatus(SPI2, SPI_BUSY_FLAG));		// Hang here, if BUSY FLAG is 1 means SPI is busy
 8000278:	bf00      	nop
 800027a:	2180      	movs	r1, #128	; 0x80
 800027c:	4805      	ldr	r0, [pc, #20]	; (8000294 <main+0xac>)
 800027e:	f000 fcfc 	bl	8000c7a <SPI_getFlagStatus>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d1f8      	bne.n	800027a <main+0x92>


		/* -- Now, Tx is done, Disable the peripheral -- */
		// Disabling abruptly may cause problems, ensure that all the data is transmitted before disabling
		SPI_PeripheralControl(SPI2, DISABLE);
 8000288:	2100      	movs	r1, #0
 800028a:	4802      	ldr	r0, [pc, #8]	; (8000294 <main+0xac>)
 800028c:	f000 fd09 	bl	8000ca2 <SPI_PeripheralControl>
	{
 8000290:	e7bb      	b.n	800020a <main+0x22>
 8000292:	bf00      	nop
 8000294:	40003800 	.word	0x40003800
 8000298:	40020000 	.word	0x40020000

0800029c <SPI2_GPIO_Init>:

}


void SPI2_GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
	/* --  Handle variable -- */
	GPIO_Handle_t SPIpins;

	/* -- Port Selection -- */
	SPIpins.pGPIOx 								= GPIOB;			    // PORT B
 80002a2:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <SPI2_GPIO_Init+0x58>)
 80002a4:	607b      	str	r3, [r7, #4]

	// Peripheral Configurations
	SPIpins.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFUNC;	// Mode as Alternate Functionality
 80002a6:	2302      	movs	r3, #2
 80002a8:	727b      	strb	r3, [r7, #9]
	SPIpins.GPIO_PinConfig.GPIO_PinAltFuncMode 	= 5;					// ALT FUNCTION Mode is 5
 80002aa:	2305      	movs	r3, #5
 80002ac:	737b      	strb	r3, [r7, #13]
	SPIpins.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OP_TYPE_PP;		// Push Pull Mode
 80002ae:	2300      	movs	r3, #0
 80002b0:	733b      	strb	r3, [r7, #12]
	SPIpins.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_NO_PUPD;			// No Pull UP/DOWN
 80002b2:	2300      	movs	r3, #0
 80002b4:	72fb      	strb	r3, [r7, #11]
	SPIpins.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_SPEED_VERY_HIGH;	// SPEED doesn't matter
 80002b6:	2303      	movs	r3, #3
 80002b8:	72bb      	strb	r3, [r7, #10]

	/* -- Pins Configuration -- */
	// PB(15) -> SPI2_MOSI
	SPIpins.GPIO_PinConfig.GPIO_PinNumber		= GPIO_Pin_15;
 80002ba:	230f      	movs	r3, #15
 80002bc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 f9e7 	bl	8000694 <GPIO_Init>


	// PB(14) -> SPI2_MISO
	SPIpins.GPIO_PinConfig.GPIO_PinNumber		= GPIO_Pin_14;
 80002c6:	230e      	movs	r3, #14
 80002c8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f9e1 	bl	8000694 <GPIO_Init>


	// PB(13) -> SPI2_SCLK
	SPIpins.GPIO_PinConfig.GPIO_PinNumber		= GPIO_Pin_13;
 80002d2:	230d      	movs	r3, #13
 80002d4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 f9db 	bl	8000694 <GPIO_Init>


	// PB(12) -> SPI2_NSS
	SPIpins.GPIO_PinConfig.GPIO_PinNumber		= GPIO_Pin_12;
 80002de:	230c      	movs	r3, #12
 80002e0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIpins);
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 f9d5 	bl	8000694 <GPIO_Init>

}
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40020400 	.word	0x40020400

080002f8 <SPI2_Init>:

void SPI2_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b088      	sub	sp, #32
 80002fc:	af00      	add	r7, sp, #0
	/* --  Handle variable -- */
	SPI_Handle_t SPI2Handle;

	/* -- Base Address of the SPI2 Peripheral -- */
	SPI2Handle.pSPIx							= SPI2;
 80002fe:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <SPI2_Init+0x38>)
 8000300:	603b      	str	r3, [r7, #0]

	/* -- Peripheral Configuration -- */
	SPI2Handle.SPIConfig.SPI_BusConfig			= SPI_BUS_CONFIG_FD;		// Full-Duplex Communication
 8000302:	2301      	movs	r3, #1
 8000304:	717b      	strb	r3, [r7, #5]
	SPI2Handle.SPIConfig.SPI_DeviceMOde			= SPI_DEVICE_MODE_MASTER;	// Application is MASTER
 8000306:	2301      	movs	r3, #1
 8000308:	713b      	strb	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_Speed				= SPI_SCLK_SPEED_DIV_8;		// Max Speed p-clk/8 : SCLK = 2MHz
 800030a:	2302      	movs	r3, #2
 800030c:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_DFF				= SPI_DFF_8BITS;			// 8Bits Data Frame Format
 800030e:	2300      	movs	r3, #0
 8000310:	71bb      	strb	r3, [r7, #6]
	SPI2Handle.SPIConfig.SPI_COPL				= SPI_CPOL_LOW;				// Default
 8000312:	2300      	movs	r3, #0
 8000314:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_CPHA				= SPI_CPHA_LOW;				// Default
 8000316:	2300      	movs	r3, #0
 8000318:	71fb      	strb	r3, [r7, #7]
	SPI2Handle.SPIConfig.SPI_SSM				= SPI_SSM_SW_DI;			// Software Slave Select Management Disabled
 800031a:	2300      	movs	r3, #0
 800031c:	727b      	strb	r3, [r7, #9]

	/* -- Initialize the SPI Peripheral -- */
	SPI_Init(&SPI2Handle);
 800031e:	463b      	mov	r3, r7
 8000320:	4618      	mov	r0, r3
 8000322:	f000 fbe1 	bl	8000ae8 <SPI_Init>

}
 8000326:	bf00      	nop
 8000328:	3720      	adds	r7, #32
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40003800 	.word	0x40003800

08000334 <GPIO_buttonInit>:

void GPIO_buttonInit(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
	/* -- Variable for GPIO Handle Structure: for Button -- */
	GPIO_Handle_t gpio_button;

	/* ------------------------------- GPIO Button Pin CONFIGURATIONS -----------------------------------------*/
		// Select Port
		gpio_button.pGPIOx = GPIOA;
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <GPIO_buttonInit+0x2c>)
 800033c:	607b      	str	r3, [r7, #4]

		// Pin Configuration: PIN NUMBER
		gpio_button.GPIO_PinConfig.GPIO_PinNumber 		= GPIO_Pin_0;
 800033e:	2300      	movs	r3, #0
 8000340:	723b      	strb	r3, [r7, #8]

		// Pin Configuration: PIN MODE
		gpio_button.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_IN;
 8000342:	2300      	movs	r3, #0
 8000344:	727b      	strb	r3, [r7, #9]

		// Pin Configuration: GPIO SPEED (Not important in this case)
		gpio_button.GPIO_PinConfig.GPIO_PinSpeed 		= GPIO_SPEED_VERY_HIGH;
 8000346:	2303      	movs	r3, #3
 8000348:	72bb      	strb	r3, [r7, #10]

		// Pin Configuration: PU-PD Configuration (Selected ->NO PU PD, As PIN is already PULLED-DOWN -> Schematics)
		gpio_button.GPIO_PinConfig.GPIO_PinPuPdControl 	= GPIO_NO_PUPD;
 800034a:	2300      	movs	r3, #0
 800034c:	72fb      	strb	r3, [r7, #11]

		/* -- Before Calling GPIO Init, Enable Peripheral Clock -- */
		// Clock will be enabled in GPIO_init();

		/* -- Call GPIO Initialization Function and pass address of handle variable as input argument -- */
		GPIO_Init(&gpio_button);
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	4618      	mov	r0, r3
 8000352:	f000 f99f 	bl	8000694 <GPIO_Init>

}
 8000356:	bf00      	nop
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40020000 	.word	0x40020000

08000364 <softDelay>:


void softDelay(void)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 800036a:	2300      	movs	r3, #0
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	e002      	b.n	8000376 <softDelay+0x12>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	3301      	adds	r3, #1
 8000374:	607b      	str	r3, [r7, #4]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a04      	ldr	r2, [pc, #16]	; (800038c <softDelay+0x28>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d9f8      	bls.n	8000370 <softDelay+0xc>
}
 800037e:	bf00      	nop
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	0003d08f 	.word	0x0003d08f

08000390 <led_init_all>:
}


/* ---------------------- LED CODE ---------------------------------- */
void led_init_all(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 8000396:	4b19      	ldr	r3, [pc, #100]	; (80003fc <led_init_all+0x6c>)
 8000398:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 800039a:	4b19      	ldr	r3, [pc, #100]	; (8000400 <led_init_all+0x70>)
 800039c:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f043 0208 	orr.w	r2, r3, #8
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	601a      	str	r2, [r3, #0]

    led_off(LED_GREEN);
 80003da:	200c      	movs	r0, #12
 80003dc:	f000 f82a 	bl	8000434 <led_off>
    led_off(LED_ORANGE);
 80003e0:	200d      	movs	r0, #13
 80003e2:	f000 f827 	bl	8000434 <led_off>
    led_off(LED_RED);
 80003e6:	200e      	movs	r0, #14
 80003e8:	f000 f824 	bl	8000434 <led_off>
    led_off(LED_BLUE);
 80003ec:	200f      	movs	r0, #15
 80003ee:	f000 f821 	bl	8000434 <led_off>
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40023830 	.word	0x40023830
 8000400:	40020c00 	.word	0x40020c00

08000404 <led_on>:

void led_on(uint8_t led_no)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <led_on+0x2c>)
 8000410:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	79fa      	ldrb	r2, [r7, #7]
 8000418:	2101      	movs	r1, #1
 800041a:	fa01 f202 	lsl.w	r2, r1, r2
 800041e:	431a      	orrs	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	601a      	str	r2, [r3, #0]

}
 8000424:	bf00      	nop
 8000426:	3714      	adds	r7, #20
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40020c14 	.word	0x40020c14

08000434 <led_off>:

void led_off(uint8_t led_no)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 800043e:	4b09      	ldr	r3, [pc, #36]	; (8000464 <led_off+0x30>)
 8000440:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	79fa      	ldrb	r2, [r7, #7]
 8000448:	2101      	movs	r1, #1
 800044a:	fa01 f202 	lsl.w	r2, r1, r2
 800044e:	43d2      	mvns	r2, r2
 8000450:	401a      	ands	r2, r3
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	601a      	str	r2, [r3, #0]

}
 8000456:	bf00      	nop
 8000458:	3714      	adds	r7, #20
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40020c14 	.word	0x40020c14

08000468 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000468:	480d      	ldr	r0, [pc, #52]	; (80004a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800046a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800046c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000470:	480c      	ldr	r0, [pc, #48]	; (80004a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000472:	490d      	ldr	r1, [pc, #52]	; (80004a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000474:	4a0d      	ldr	r2, [pc, #52]	; (80004ac <LoopForever+0xe>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000478:	e002      	b.n	8000480 <LoopCopyDataInit>

0800047a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800047c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047e:	3304      	adds	r3, #4

08000480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000484:	d3f9      	bcc.n	800047a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000486:	4a0a      	ldr	r2, [pc, #40]	; (80004b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000488:	4c0a      	ldr	r4, [pc, #40]	; (80004b4 <LoopForever+0x16>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800048c:	e001      	b.n	8000492 <LoopFillZerobss>

0800048e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000490:	3204      	adds	r2, #4

08000492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000494:	d3fb      	bcc.n	800048e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000496:	f000 fc3d 	bl	8000d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800049a:	f7ff fea5 	bl	80001e8 <main>

0800049e <LoopForever>:

LoopForever:
    b LoopForever
 800049e:	e7fe      	b.n	800049e <LoopForever>
  ldr   r0, =_estack
 80004a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004ac:	08000d7c 	.word	0x08000d7c
  ldr r2, =_sbss
 80004b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004b4:	2000001c 	.word	0x2000001c

080004b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b8:	e7fe      	b.n	80004b8 <ADC_IRQHandler>
	...

080004bc <GPIO_PeriClockControl>:
 * Parameter 2	:	ENABLE or DISABLE Macro
 * Return Type	:	none (void)
 * Note			:	none
 * ------------------------------------------------------------------------------------------------------ */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	460b      	mov	r3, r1
 80004c6:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 80004c8:	78fb      	ldrb	r3, [r7, #3]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d162      	bne.n	8000594 <GPIO_PeriClockControl+0xd8>
	{
		if (pGPIOx == GPIOA)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a66      	ldr	r2, [pc, #408]	; (800066c <GPIO_PeriClockControl+0x1b0>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d106      	bne.n	80004e4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80004d6:	4b66      	ldr	r3, [pc, #408]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	4a65      	ldr	r2, [pc, #404]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6313      	str	r3, [r2, #48]	; 0x30
				// MEh
			}
		}

	}
}
 80004e2:	e0bc      	b.n	800065e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a63      	ldr	r2, [pc, #396]	; (8000674 <GPIO_PeriClockControl+0x1b8>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d106      	bne.n	80004fa <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80004ec:	4b60      	ldr	r3, [pc, #384]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f0:	4a5f      	ldr	r2, [pc, #380]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 80004f2:	f043 0302 	orr.w	r3, r3, #2
 80004f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f8:	e0b1      	b.n	800065e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a5e      	ldr	r2, [pc, #376]	; (8000678 <GPIO_PeriClockControl+0x1bc>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d106      	bne.n	8000510 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000502:	4b5b      	ldr	r3, [pc, #364]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a5a      	ldr	r2, [pc, #360]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050e:	e0a6      	b.n	800065e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a5a      	ldr	r2, [pc, #360]	; (800067c <GPIO_PeriClockControl+0x1c0>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d106      	bne.n	8000526 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000518:	4b55      	ldr	r3, [pc, #340]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 800051a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051c:	4a54      	ldr	r2, [pc, #336]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 800051e:	f043 0308 	orr.w	r3, r3, #8
 8000522:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000524:	e09b      	b.n	800065e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a55      	ldr	r2, [pc, #340]	; (8000680 <GPIO_PeriClockControl+0x1c4>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d106      	bne.n	800053c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800052e:	4b50      	ldr	r3, [pc, #320]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a4f      	ldr	r2, [pc, #316]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 8000534:	f043 0310 	orr.w	r3, r3, #16
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
}
 800053a:	e090      	b.n	800065e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4a51      	ldr	r2, [pc, #324]	; (8000684 <GPIO_PeriClockControl+0x1c8>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d106      	bne.n	8000552 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000544:	4b4a      	ldr	r3, [pc, #296]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000548:	4a49      	ldr	r2, [pc, #292]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 800054a:	f043 0320 	orr.w	r3, r3, #32
 800054e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000550:	e085      	b.n	800065e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a4c      	ldr	r2, [pc, #304]	; (8000688 <GPIO_PeriClockControl+0x1cc>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d106      	bne.n	8000568 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800055a:	4b45      	ldr	r3, [pc, #276]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a44      	ldr	r2, [pc, #272]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 8000560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000566:	e07a      	b.n	800065e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a48      	ldr	r2, [pc, #288]	; (800068c <GPIO_PeriClockControl+0x1d0>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d106      	bne.n	800057e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000570:	4b3f      	ldr	r3, [pc, #252]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 8000572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000574:	4a3e      	ldr	r2, [pc, #248]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 8000576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800057a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800057c:	e06f      	b.n	800065e <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a43      	ldr	r2, [pc, #268]	; (8000690 <GPIO_PeriClockControl+0x1d4>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d16b      	bne.n	800065e <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 8000586:	4b3a      	ldr	r3, [pc, #232]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a39      	ldr	r2, [pc, #228]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 800058c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000592:	e064      	b.n	800065e <GPIO_PeriClockControl+0x1a2>
		if (EnorDi == DISABLE)
 8000594:	78fb      	ldrb	r3, [r7, #3]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d161      	bne.n	800065e <GPIO_PeriClockControl+0x1a2>
			if (pGPIOx == GPIOA)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a33      	ldr	r2, [pc, #204]	; (800066c <GPIO_PeriClockControl+0x1b0>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d106      	bne.n	80005b0 <GPIO_PeriClockControl+0xf4>
				GPIOA_PCLK_DI();
 80005a2:	4b33      	ldr	r3, [pc, #204]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a32      	ldr	r2, [pc, #200]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 80005a8:	f023 0301 	bic.w	r3, r3, #1
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ae:	e056      	b.n	800065e <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOB)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a30      	ldr	r2, [pc, #192]	; (8000674 <GPIO_PeriClockControl+0x1b8>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d106      	bne.n	80005c6 <GPIO_PeriClockControl+0x10a>
				GPIOB_PCLK_DI();
 80005b8:	4b2d      	ldr	r3, [pc, #180]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 80005ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005bc:	4a2c      	ldr	r2, [pc, #176]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 80005be:	f023 0302 	bic.w	r3, r3, #2
 80005c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c4:	e04b      	b.n	800065e <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOC)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a2b      	ldr	r2, [pc, #172]	; (8000678 <GPIO_PeriClockControl+0x1bc>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d106      	bne.n	80005dc <GPIO_PeriClockControl+0x120>
				GPIOC_PCLK_DI();
 80005ce:	4b28      	ldr	r3, [pc, #160]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a27      	ldr	r2, [pc, #156]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 80005d4:	f023 0304 	bic.w	r3, r3, #4
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005da:	e040      	b.n	800065e <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOD)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4a27      	ldr	r2, [pc, #156]	; (800067c <GPIO_PeriClockControl+0x1c0>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d106      	bne.n	80005f2 <GPIO_PeriClockControl+0x136>
				GPIOD_PCLK_DI();
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 80005e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e8:	4a21      	ldr	r2, [pc, #132]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 80005ea:	f023 0308 	bic.w	r3, r3, #8
 80005ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005f0:	e035      	b.n	800065e <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOE)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a22      	ldr	r2, [pc, #136]	; (8000680 <GPIO_PeriClockControl+0x1c4>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d106      	bne.n	8000608 <GPIO_PeriClockControl+0x14c>
				GPIOE_PCLK_DI();
 80005fa:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a1c      	ldr	r2, [pc, #112]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 8000600:	f023 0310 	bic.w	r3, r3, #16
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000606:	e02a      	b.n	800065e <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOF)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a1e      	ldr	r2, [pc, #120]	; (8000684 <GPIO_PeriClockControl+0x1c8>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <GPIO_PeriClockControl+0x162>
				GPIOF_PCLK_DI();
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 8000612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000614:	4a16      	ldr	r2, [pc, #88]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 8000616:	f023 0320 	bic.w	r3, r3, #32
 800061a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800061c:	e01f      	b.n	800065e <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOG)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a19      	ldr	r2, [pc, #100]	; (8000688 <GPIO_PeriClockControl+0x1cc>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <GPIO_PeriClockControl+0x178>
				GPIOG_PCLK_EN();
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a11      	ldr	r2, [pc, #68]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 800062c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000632:	e014      	b.n	800065e <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOH)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a15      	ldr	r2, [pc, #84]	; (800068c <GPIO_PeriClockControl+0x1d0>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <GPIO_PeriClockControl+0x18e>
				GPIOH_PCLK_DI();
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000640:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 8000642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000646:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000648:	e009      	b.n	800065e <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOI)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a10      	ldr	r2, [pc, #64]	; (8000690 <GPIO_PeriClockControl+0x1d4>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d105      	bne.n	800065e <GPIO_PeriClockControl+0x1a2>
				GPIOI_PCLK_DI();
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a06      	ldr	r2, [pc, #24]	; (8000670 <GPIO_PeriClockControl+0x1b4>)
 8000658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40020000 	.word	0x40020000
 8000670:	40023800 	.word	0x40023800
 8000674:	40020400 	.word	0x40020400
 8000678:	40020800 	.word	0x40020800
 800067c:	40020c00 	.word	0x40020c00
 8000680:	40021000 	.word	0x40021000
 8000684:	40021400 	.word	0x40021400
 8000688:	40021800 	.word	0x40021800
 800068c:	40021c00 	.word	0x40021c00
 8000690:	40022000 	.word	0x40022000

08000694 <GPIO_Init>:
 * Parameter 1	:
 * Return Type	:	none (void)
 * Note			:	Peripheral Clock is enabled at starting of the function, so users need not do it explicitly.
 * ------------------------------------------------------------------------------------------------------ */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	// Enable Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2101      	movs	r1, #1
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff0a 	bl	80004bc <GPIO_PeriClockControl>

	uint32_t temp = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]

	// ->  1. Configure the GPIO pin Mode

	// As defined in x_gpio_drivers.h, Pin Modes greater than 3 are interrupt modes
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	795b      	ldrb	r3, [r3, #5]
 80006b0:	2b03      	cmp	r3, #3
 80006b2:	d821      	bhi.n	80006f8 <GPIO_Init+0x64>
	{
		// In Pin Mode Register, each pin takes 2 bit fields [Shift value according to pin number]
		// Logic: Mode value left shifter by (2 * pin number)
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	795b      	ldrb	r3, [r3, #5]
 80006b8:	461a      	mov	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	fa02 f303 	lsl.w	r3, r2, r3
 80006c4:	617b      	str	r3, [r7, #20]

		// Store 'temp' i.e. Mode Value in MODE Register [Set/touch only required bit leave rest untouched '|']
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear required bits
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	791b      	ldrb	r3, [r3, #4]
 80006d0:	4619      	mov	r1, r3
 80006d2:	2303      	movs	r3, #3
 80006d4:	408b      	lsls	r3, r1
 80006d6:	43db      	mvns	r3, r3
 80006d8:	4619      	mov	r1, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	400a      	ands	r2, r1
 80006e0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;													// Update required bits
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	6819      	ldr	r1, [r3, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	697a      	ldr	r2, [r7, #20]
 80006ee:	430a      	orrs	r2, r1
 80006f0:	601a      	str	r2, [r3, #0]

		// Reset 'temp'
		temp = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
 80006f6:	e0ca      	b.n	800088e <GPIO_Init+0x1fa>
		 * 6. Enable interrupt reception on that IRQ number [NVIC Registers]
		 * 7. Implement the IRQ handler.
		 * */

		// -> Configure the edge trigger
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	795b      	ldrb	r3, [r3, #5]
 80006fc:	2b04      	cmp	r3, #4
 80006fe:	d117      	bne.n	8000730 <GPIO_Init+0x9c>
		{
			// Configure the Falling Trigger Selection Register (FTSR)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000700:	4b4a      	ldr	r3, [pc, #296]	; (800082c <GPIO_Init+0x198>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	7912      	ldrb	r2, [r2, #4]
 8000708:	4611      	mov	r1, r2
 800070a:	2201      	movs	r2, #1
 800070c:	408a      	lsls	r2, r1
 800070e:	4611      	mov	r1, r2
 8000710:	4a46      	ldr	r2, [pc, #280]	; (800082c <GPIO_Init+0x198>)
 8000712:	430b      	orrs	r3, r1
 8000714:	60d3      	str	r3, [r2, #12]

			// As a safe side, Clear same bit in RTSR so just FTSR is configured
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000716:	4b45      	ldr	r3, [pc, #276]	; (800082c <GPIO_Init+0x198>)
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	7912      	ldrb	r2, [r2, #4]
 800071e:	4611      	mov	r1, r2
 8000720:	2201      	movs	r2, #1
 8000722:	408a      	lsls	r2, r1
 8000724:	43d2      	mvns	r2, r2
 8000726:	4611      	mov	r1, r2
 8000728:	4a40      	ldr	r2, [pc, #256]	; (800082c <GPIO_Init+0x198>)
 800072a:	400b      	ands	r3, r1
 800072c:	6093      	str	r3, [r2, #8]
 800072e:	e035      	b.n	800079c <GPIO_Init+0x108>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	795b      	ldrb	r3, [r3, #5]
 8000734:	2b05      	cmp	r3, #5
 8000736:	d117      	bne.n	8000768 <GPIO_Init+0xd4>
		{
			// Configure the Rising Trigger Selection Register (RTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000738:	4b3c      	ldr	r3, [pc, #240]	; (800082c <GPIO_Init+0x198>)
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	7912      	ldrb	r2, [r2, #4]
 8000740:	4611      	mov	r1, r2
 8000742:	2201      	movs	r2, #1
 8000744:	408a      	lsls	r2, r1
 8000746:	4611      	mov	r1, r2
 8000748:	4a38      	ldr	r2, [pc, #224]	; (800082c <GPIO_Init+0x198>)
 800074a:	430b      	orrs	r3, r1
 800074c:	6093      	str	r3, [r2, #8]

			// As a safe side, Clear same bit in FTSR so just RTSR is configured
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800074e:	4b37      	ldr	r3, [pc, #220]	; (800082c <GPIO_Init+0x198>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	7912      	ldrb	r2, [r2, #4]
 8000756:	4611      	mov	r1, r2
 8000758:	2201      	movs	r2, #1
 800075a:	408a      	lsls	r2, r1
 800075c:	43d2      	mvns	r2, r2
 800075e:	4611      	mov	r1, r2
 8000760:	4a32      	ldr	r2, [pc, #200]	; (800082c <GPIO_Init+0x198>)
 8000762:	400b      	ands	r3, r1
 8000764:	60d3      	str	r3, [r2, #12]
 8000766:	e019      	b.n	800079c <GPIO_Init+0x108>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	795b      	ldrb	r3, [r3, #5]
 800076c:	2b06      	cmp	r3, #6
 800076e:	d115      	bne.n	800079c <GPIO_Init+0x108>
		{
			// Configure the both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000770:	4b2e      	ldr	r3, [pc, #184]	; (800082c <GPIO_Init+0x198>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	7912      	ldrb	r2, [r2, #4]
 8000778:	4611      	mov	r1, r2
 800077a:	2201      	movs	r2, #1
 800077c:	408a      	lsls	r2, r1
 800077e:	4611      	mov	r1, r2
 8000780:	4a2a      	ldr	r2, [pc, #168]	; (800082c <GPIO_Init+0x198>)
 8000782:	430b      	orrs	r3, r1
 8000784:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000786:	4b29      	ldr	r3, [pc, #164]	; (800082c <GPIO_Init+0x198>)
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	7912      	ldrb	r2, [r2, #4]
 800078e:	4611      	mov	r1, r2
 8000790:	2201      	movs	r2, #1
 8000792:	408a      	lsls	r2, r1
 8000794:	4611      	mov	r1, r2
 8000796:	4a25      	ldr	r2, [pc, #148]	; (800082c <GPIO_Init+0x198>)
 8000798:	430b      	orrs	r3, r1
 800079a:	6093      	str	r3, [r2, #8]
		// -> Configure the GPIO Port Selection in SYSCFG_EXTICR
		// GPIO_Pin_x of WHICH port is delivering interrupt? decided by GPIO Port selection [By default, PORTA]

		uint8_t SYSArrayIndex, SYSBitField;

		SYSArrayIndex = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) / 4;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	791b      	ldrb	r3, [r3, #4]
 80007a0:	089b      	lsrs	r3, r3, #2
 80007a2:	74fb      	strb	r3, [r7, #19]
		SYSBitField	  = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 4;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	791b      	ldrb	r3, [r3, #4]
 80007a8:	f003 0303 	and.w	r3, r3, #3
 80007ac:	74bb      	strb	r3, [r7, #18]

		// Now store the Port Code
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a1f      	ldr	r2, [pc, #124]	; (8000830 <GPIO_Init+0x19c>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d04d      	beq.n	8000854 <GPIO_Init+0x1c0>
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a1d      	ldr	r2, [pc, #116]	; (8000834 <GPIO_Init+0x1a0>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d032      	beq.n	8000828 <GPIO_Init+0x194>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <GPIO_Init+0x1a4>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d02b      	beq.n	8000824 <GPIO_Init+0x190>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a1a      	ldr	r2, [pc, #104]	; (800083c <GPIO_Init+0x1a8>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d024      	beq.n	8000820 <GPIO_Init+0x18c>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a19      	ldr	r2, [pc, #100]	; (8000840 <GPIO_Init+0x1ac>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d01d      	beq.n	800081c <GPIO_Init+0x188>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a17      	ldr	r2, [pc, #92]	; (8000844 <GPIO_Init+0x1b0>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d016      	beq.n	8000818 <GPIO_Init+0x184>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a16      	ldr	r2, [pc, #88]	; (8000848 <GPIO_Init+0x1b4>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d00f      	beq.n	8000814 <GPIO_Init+0x180>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a14      	ldr	r2, [pc, #80]	; (800084c <GPIO_Init+0x1b8>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d008      	beq.n	8000810 <GPIO_Init+0x17c>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a13      	ldr	r2, [pc, #76]	; (8000850 <GPIO_Init+0x1bc>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d101      	bne.n	800080c <GPIO_Init+0x178>
 8000808:	2308      	movs	r3, #8
 800080a:	e024      	b.n	8000856 <GPIO_Init+0x1c2>
 800080c:	2300      	movs	r3, #0
 800080e:	e022      	b.n	8000856 <GPIO_Init+0x1c2>
 8000810:	2307      	movs	r3, #7
 8000812:	e020      	b.n	8000856 <GPIO_Init+0x1c2>
 8000814:	2306      	movs	r3, #6
 8000816:	e01e      	b.n	8000856 <GPIO_Init+0x1c2>
 8000818:	2305      	movs	r3, #5
 800081a:	e01c      	b.n	8000856 <GPIO_Init+0x1c2>
 800081c:	2304      	movs	r3, #4
 800081e:	e01a      	b.n	8000856 <GPIO_Init+0x1c2>
 8000820:	2303      	movs	r3, #3
 8000822:	e018      	b.n	8000856 <GPIO_Init+0x1c2>
 8000824:	2302      	movs	r3, #2
 8000826:	e016      	b.n	8000856 <GPIO_Init+0x1c2>
 8000828:	2301      	movs	r3, #1
 800082a:	e014      	b.n	8000856 <GPIO_Init+0x1c2>
 800082c:	40013c00 	.word	0x40013c00
 8000830:	40020000 	.word	0x40020000
 8000834:	40020400 	.word	0x40020400
 8000838:	40020800 	.word	0x40020800
 800083c:	40020c00 	.word	0x40020c00
 8000840:	40021000 	.word	0x40021000
 8000844:	40021400 	.word	0x40021400
 8000848:	40021800 	.word	0x40021800
 800084c:	40021c00 	.word	0x40021c00
 8000850:	40022000 	.word	0x40022000
 8000854:	2300      	movs	r3, #0
 8000856:	747b      	strb	r3, [r7, #17]
		SYSCFG_EN();												   // Clock Enable
 8000858:	4b5b      	ldr	r3, [pc, #364]	; (80009c8 <GPIO_Init+0x334>)
 800085a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085c:	4a5a      	ldr	r2, [pc, #360]	; (80009c8 <GPIO_Init+0x334>)
 800085e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000862:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[SYSArrayIndex] = portcode << (SYSBitField * 4); // before configuring, enable clock
 8000864:	7c7a      	ldrb	r2, [r7, #17]
 8000866:	7cbb      	ldrb	r3, [r7, #18]
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	fa02 f103 	lsl.w	r1, r2, r3
 800086e:	4a57      	ldr	r2, [pc, #348]	; (80009cc <GPIO_Init+0x338>)
 8000870:	7cfb      	ldrb	r3, [r7, #19]
 8000872:	3302      	adds	r3, #2
 8000874:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// -> Enable EXTI Interrupt delivery using Interrupt Mask Register
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000878:	4b55      	ldr	r3, [pc, #340]	; (80009d0 <GPIO_Init+0x33c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	7912      	ldrb	r2, [r2, #4]
 8000880:	4611      	mov	r1, r2
 8000882:	2201      	movs	r2, #1
 8000884:	408a      	lsls	r2, r1
 8000886:	4611      	mov	r1, r2
 8000888:	4a51      	ldr	r2, [pc, #324]	; (80009d0 <GPIO_Init+0x33c>)
 800088a:	430b      	orrs	r3, r1
 800088c:	6013      	str	r3, [r2, #0]
	}

	// -> 2. Configure the GPIO Speed

	// Logic: Speed value left shifted by 2 * pin number
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	799b      	ldrb	r3, [r3, #6]
 8000892:	461a      	mov	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	791b      	ldrb	r3, [r3, #4]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear required bits
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	689a      	ldr	r2, [r3, #8]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	4619      	mov	r1, r3
 80008ac:	2303      	movs	r3, #3
 80008ae:	408b      	lsls	r3, r1
 80008b0:	43db      	mvns	r3, r3
 80008b2:	4619      	mov	r1, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	400a      	ands	r2, r1
 80008ba:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;												  // Update required bits
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	6899      	ldr	r1, [r3, #8]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	430a      	orrs	r2, r1
 80008ca:	609a      	str	r2, [r3, #8]

	// Reset 'temp'
	temp = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]

	// -> 3. Configure the Pull-up and Pull-down setting

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	79db      	ldrb	r3, [r3, #7]
 80008d4:	461a      	mov	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	791b      	ldrb	r3, [r3, #4]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear required bits
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	68da      	ldr	r2, [r3, #12]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	791b      	ldrb	r3, [r3, #4]
 80008ec:	4619      	mov	r1, r3
 80008ee:	2303      	movs	r3, #3
 80008f0:	408b      	lsls	r3, r1
 80008f2:	43db      	mvns	r3, r3
 80008f4:	4619      	mov	r1, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	400a      	ands	r2, r1
 80008fc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	68d9      	ldr	r1, [r3, #12]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	697a      	ldr	r2, [r7, #20]
 800090a:	430a      	orrs	r2, r1
 800090c:	60da      	str	r2, [r3, #12]

	temp = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]

	// -> 4. Configure the GPIO Output type

	// Each Pin takes only 1 bit field thats why (1 * pin number)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	7a1b      	ldrb	r3, [r3, #8]
 8000916:	461a      	mov	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear required bits
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	685a      	ldr	r2, [r3, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	791b      	ldrb	r3, [r3, #4]
 800092c:	4619      	mov	r1, r3
 800092e:	2301      	movs	r3, #1
 8000930:	408b      	lsls	r3, r1
 8000932:	43db      	mvns	r3, r3
 8000934:	4619      	mov	r1, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	400a      	ands	r2, r1
 800093c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6859      	ldr	r1, [r3, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	430a      	orrs	r2, r1
 800094c:	605a      	str	r2, [r3, #4]

	temp = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]

	// -> 5. Configure the Alternate Functionality

	// If mode is selected as Alternate Function then only configure for Alternate Functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUNC)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	795b      	ldrb	r3, [r3, #5]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d131      	bne.n	80009be <GPIO_Init+0x32a>
		//      : then, to get Bit position (y = (pin_number % 8))
		//		AF[x] = alt_fnc_value  << (4 * y)

		uint8_t AFarrayIndex, AFbitField;

		AFarrayIndex = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	791b      	ldrb	r3, [r3, #4]
 800095e:	08db      	lsrs	r3, r3, #3
 8000960:	743b      	strb	r3, [r7, #16]
		AFbitField	 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	791b      	ldrb	r3, [r3, #4]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[AFarrayIndex] &= ~(0xF << (4 * AFbitField));					// Clear required Bits
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	7c3a      	ldrb	r2, [r7, #16]
 8000972:	3208      	adds	r2, #8
 8000974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	220f      	movs	r2, #15
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	4618      	mov	r0, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	7c3a      	ldrb	r2, [r7, #16]
 800098c:	4001      	ands	r1, r0
 800098e:	3208      	adds	r2, #8
 8000990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[AFarrayIndex] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * AFbitField);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	7c3a      	ldrb	r2, [r7, #16]
 800099a:	3208      	adds	r2, #8
 800099c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	7a5b      	ldrb	r3, [r3, #9]
 80009a4:	461a      	mov	r2, r3
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	7c3a      	ldrb	r2, [r7, #16]
 80009b6:	4301      	orrs	r1, r0
 80009b8:	3208      	adds	r2, #8
 80009ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 80009be:	bf00      	nop
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40013800 	.word	0x40013800
 80009d0:	40013c00 	.word	0x40013c00

080009d4 <GPIO_ReadFromInputPin>:
 * Parameter 2	: 	Pin Number to read from
 * Return Type	: 	uint8_t : either 0 or 1
 * Note			:
 * ------------------------------------------------------------------------------------------------------ */
uint8_t  GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]

	// get value from IDR (Input Data Register)
	// Right Shift the value of IDR by PinNumber times (so that desired value reaches at bit position 0 LSB)
	// then, mask the remaining bit positions and extract the 0th (LSB) bit. Thats the pin Value

	pinValue = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	691a      	ldr	r2, [r3, #16]
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	fa22 f303 	lsr.w	r3, r2, r3
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	73fb      	strb	r3, [r7, #15]

	return pinValue;
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <SPI_PeriClockControl>:
 * Parameter 2	:	ENABLE or DISABLE Macro
 * Return Type	:	none (void)
 * Note			:	none
 * ------------------------------------------------------------------------------------------------------ */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000a0c:	78fb      	ldrb	r3, [r7, #3]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d12b      	bne.n	8000a6a <SPI_PeriClockControl+0x6a>
	{
		if (pSPIx == SPI1)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a2f      	ldr	r2, [pc, #188]	; (8000ad4 <SPI_PeriClockControl+0xd4>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d106      	bne.n	8000a28 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000a1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ad8 <SPI_PeriClockControl+0xd8>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	4a2e      	ldr	r2, [pc, #184]	; (8000ad8 <SPI_PeriClockControl+0xd8>)
 8000a20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a24:	6453      	str	r3, [r2, #68]	; 0x44
				// MEh
			}
		}

	}
}
 8000a26:	e04e      	b.n	8000ac6 <SPI_PeriClockControl+0xc6>
		else if (pSPIx == SPI2)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a2c      	ldr	r2, [pc, #176]	; (8000adc <SPI_PeriClockControl+0xdc>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d106      	bne.n	8000a3e <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000a30:	4b29      	ldr	r3, [pc, #164]	; (8000ad8 <SPI_PeriClockControl+0xd8>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	4a28      	ldr	r2, [pc, #160]	; (8000ad8 <SPI_PeriClockControl+0xd8>)
 8000a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a3c:	e043      	b.n	8000ac6 <SPI_PeriClockControl+0xc6>
		else if (pSPIx == SPI3)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a27      	ldr	r2, [pc, #156]	; (8000ae0 <SPI_PeriClockControl+0xe0>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d106      	bne.n	8000a54 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 8000a46:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <SPI_PeriClockControl+0xd8>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a23      	ldr	r2, [pc, #140]	; (8000ad8 <SPI_PeriClockControl+0xd8>)
 8000a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a52:	e038      	b.n	8000ac6 <SPI_PeriClockControl+0xc6>
		else if (pSPIx == SPI4)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a23      	ldr	r2, [pc, #140]	; (8000ae4 <SPI_PeriClockControl+0xe4>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d134      	bne.n	8000ac6 <SPI_PeriClockControl+0xc6>
			SPI4_PCLK_EN();
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <SPI_PeriClockControl+0xd8>)
 8000a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a60:	4a1d      	ldr	r2, [pc, #116]	; (8000ad8 <SPI_PeriClockControl+0xd8>)
 8000a62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a66:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a68:	e02d      	b.n	8000ac6 <SPI_PeriClockControl+0xc6>
		if (EnorDi == DISABLE)
 8000a6a:	78fb      	ldrb	r3, [r7, #3]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d12a      	bne.n	8000ac6 <SPI_PeriClockControl+0xc6>
			if (pSPIx == SPI1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a18      	ldr	r2, [pc, #96]	; (8000ad4 <SPI_PeriClockControl+0xd4>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d106      	bne.n	8000a86 <SPI_PeriClockControl+0x86>
				SPI1_PCLK_DI();
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <SPI_PeriClockControl+0xd8>)
 8000a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7c:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <SPI_PeriClockControl+0xd8>)
 8000a7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a82:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a84:	e01f      	b.n	8000ac6 <SPI_PeriClockControl+0xc6>
			else if (pSPIx == SPI2)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a14      	ldr	r2, [pc, #80]	; (8000adc <SPI_PeriClockControl+0xdc>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d106      	bne.n	8000a9c <SPI_PeriClockControl+0x9c>
				SPI2_PCLK_DI();
 8000a8e:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <SPI_PeriClockControl+0xd8>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a11      	ldr	r2, [pc, #68]	; (8000ad8 <SPI_PeriClockControl+0xd8>)
 8000a94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a9a:	e014      	b.n	8000ac6 <SPI_PeriClockControl+0xc6>
			else if (pSPIx == SPI3)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <SPI_PeriClockControl+0xe0>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d106      	bne.n	8000ab2 <SPI_PeriClockControl+0xb2>
				SPI3_PCLK_DI();
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <SPI_PeriClockControl+0xd8>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <SPI_PeriClockControl+0xd8>)
 8000aaa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000aae:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ab0:	e009      	b.n	8000ac6 <SPI_PeriClockControl+0xc6>
			else if (pSPIx == SPI4)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <SPI_PeriClockControl+0xe4>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d105      	bne.n	8000ac6 <SPI_PeriClockControl+0xc6>
				SPI4_PCLK_DI();
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <SPI_PeriClockControl+0xd8>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <SPI_PeriClockControl+0xd8>)
 8000ac0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40013000 	.word	0x40013000
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40003800 	.word	0x40003800
 8000ae0:	40003c00 	.word	0x40003c00
 8000ae4:	40013400 	.word	0x40013400

08000ae8 <SPI_Init>:
 * Parameter 1	:	Pointer to SPI Handle
 * Return Type	:	none (void)
 * Note			:	Peripheral Clock is enabled at starting of the function, so users need not do it explicitly.
 * ------------------------------------------------------------------------------------------------------ */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	// Enable Peripheral Clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2101      	movs	r1, #1
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff82 	bl	8000a00 <SPI_PeriClockControl>


	// First, Configure SPI Control Register 1
	// Temporary Register to store bit values of SPI_CR1
	uint32_t tempReg = 0;	// 0x0 is reset state
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]

	// a. Configure the device mode
	tempReg |= pSPIHandle->SPIConfig.SPI_DeviceMOde << SPI_CR1_MSTR;		// 2nd bit : MSTR
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	791b      	ldrb	r3, [r3, #4]
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	461a      	mov	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]

	// b. Configure the Bus Config.
	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	795b      	ldrb	r3, [r3, #5]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d104      	bne.n	8000b20 <SPI_Init+0x38>
	{
		// BIDI Mode should be Cleared [15th bit]
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	e014      	b.n	8000b4a <SPI_Init+0x62>

	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	795b      	ldrb	r3, [r3, #5]
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d104      	bne.n	8000b32 <SPI_Init+0x4a>
	{
		// BIDI Mode should be Set [15th bit]
		tempReg |= (1 << SPI_CR1_BIDIMODE);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	e00b      	b.n	8000b4a <SPI_Init+0x62>

	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	795b      	ldrb	r3, [r3, #5]
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	d107      	bne.n	8000b4a <SPI_Init+0x62>
	{
		// BIDI Mode should be Cleared
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b40:	60fb      	str	r3, [r7, #12]

		// RXONLY bit MUST be Set [10th bit]
		tempReg |= (1 << SPI_CR1_RXONLY);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b48:	60fb      	str	r3, [r7, #12]
	}

	// c. Configure the DFF [11th bit]
	tempReg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	799b      	ldrb	r3, [r3, #6]
 8000b4e:	02db      	lsls	r3, r3, #11
 8000b50:	461a      	mov	r2, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]

	// d. configure the CPHA [0th bit]
	tempReg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	79db      	ldrb	r3, [r3, #7]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]

	// e. Configure the COPL [1st bit]
	tempReg |= pSPIHandle->SPIConfig.SPI_COPL << SPI_CR1_COPL;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	7a1b      	ldrb	r3, [r3, #8]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]

	// f. Configure the SSM  []
	tempReg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	7a5b      	ldrb	r3, [r3, #9]
 8000b76:	025b      	lsls	r3, r3, #9
 8000b78:	461a      	mov	r2, r3
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]

	// g. Configure the Speed [3:5 bits]
	tempReg |= pSPIHandle->SPIConfig.SPI_Speed << SPI_CR1_BR;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	7a9b      	ldrb	r3, [r3, #10]
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	461a      	mov	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]

	// Configuring SPI_CR1 register with user defined values (stored in tempReg register)
	pSPIHandle->pSPIx->CR1 = tempReg;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	601a      	str	r2, [r3, #0]
	// Can be directly assigned "=" because all the values are freshly defined, started with reseting it
}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <SPI_SendData>:
 * Parameter 3	:   Length of the Data to send
 * Return Type	:	none (void)
 * Note			:	Blocking API (Polling), function call will wait until all the bytes are transmitted.
 * ------------------------------------------------------------------------------------------------------ */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t LenOfData)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b084      	sub	sp, #16
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	60f8      	str	r0, [r7, #12]
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
	while (LenOfData > 0)
 8000baa:	e027      	b.n	8000bfc <SPI_SendData+0x5e>
	{
		// 1. Wait until TXE is set: means Tx Buffer is empty
		while (SPI_getFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000bac:	bf00      	nop
 8000bae:	2102      	movs	r1, #2
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f000 f862 	bl	8000c7a <SPI_getFlagStatus>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d0f8      	beq.n	8000bae <SPI_SendData+0x10>

		// 2. When TXE is set, Check DFF bit in CR1
		if (pSPIx->CR1 & (1 << SPI_CR1_DFF))
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d00e      	beq.n	8000be6 <SPI_SendData+0x48>
		{
			// 16 Bit DFF
			// a. Load the data into DR
			pSPIx->DR = *((uint16_t *) pTxBuffer);		// type-caste because pTxBuffer is of uint8_t and de-refernce to load the value
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	60da      	str	r2, [r3, #12]

			// b. Decrement the LenOfData, two times (because 2 Bytes of data is sent in previous step)
			LenOfData--;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
			LenOfData--;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]

			// c. Increment pTxBuffer so that it points to the next data item
			(uint16_t *) pTxBuffer++;					// type-casted because you have to increment it by 2 times
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	3301      	adds	r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	e00a      	b.n	8000bfc <SPI_SendData+0x5e>
		}
		else
		{
			// 8 Bit DFF
			// a. Load data into DR
			pSPIx->DR = *pTxBuffer;					// pTxBuffer is already of uint8_t, so just de-reference
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	60da      	str	r2, [r3, #12]

			// b. Decrement the LenOfData, one time
			LenOfData--;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	607b      	str	r3, [r7, #4]

			// c. Increment pTxBuffer so that it points to the next data item
			pTxBuffer++;
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
	while (LenOfData > 0)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1d4      	bne.n	8000bac <SPI_SendData+0xe>
		}
	}

}
 8000c02:	bf00      	nop
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <SPI_ReceiveData>:
 * Note			:	Blocking API (Polling), function call will wait until all the bytes are received.
 * 					(Similar to receive data, but instead load data into DR, here, we have to read data from DR
 * 					and increment RX buffer to make it point to next free memory address)
 * ------------------------------------------------------------------------------------------------------ */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t LenOfData)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
	while (LenOfData > 0)
 8000c18:	e027      	b.n	8000c6a <SPI_ReceiveData+0x5e>
	{
		// 1. Wait until RXNE is set: means RX Buffer is ??
		while (SPI_getFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 8000c1a:	bf00      	nop
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f000 f82b 	bl	8000c7a <SPI_getFlagStatus>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f8      	beq.n	8000c1c <SPI_ReceiveData+0x10>

		// 2. When RXNE is set, Check DFF bit in CR1
		if (pSPIx->CR1 & (1 << SPI_CR1_DFF))
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d00e      	beq.n	8000c54 <SPI_ReceiveData+0x48>
		{
			// 16 Bit DFF
			// a. Load the data from DR to RX Buffer
			*((uint16_t *) pRxBuffer) = pSPIx->DR;		// type-caste because pRxBuffer is of uint8_t and de-refernce to load the value
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	801a      	strh	r2, [r3, #0]

			// b. Decrement the LenOfData, two times (because 2 Bytes of data is sent in previous step)
			LenOfData--;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	607b      	str	r3, [r7, #4]
			LenOfData--;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	607b      	str	r3, [r7, #4]

			// c. Increment pRxBuffer so that it points to the next free memory address
			(uint16_t *) pRxBuffer++;					// type-casted because you have to increment it by 2 times
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	e00a      	b.n	8000c6a <SPI_ReceiveData+0x5e>
		}
		else
		{
			// 8 Bit DFF
			// a. Load data into from DR to RX Buffer
			*pRxBuffer = pSPIx->DR;					// pRxBuffer is already of uint8_t, so just de-reference
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	701a      	strb	r2, [r3, #0]

			// b. Decrement the LenOfData, one time
			LenOfData--;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	607b      	str	r3, [r7, #4]

			// c. Increment pTxBuffer so that it points to the next free memory address
			pRxBuffer++;
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	3301      	adds	r3, #1
 8000c68:	60bb      	str	r3, [r7, #8]
	while (LenOfData > 0)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d1d4      	bne.n	8000c1a <SPI_ReceiveData+0xe>
		}
	}


}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <SPI_getFlagStatus>:
 * Return Type	:	True or False (1 or 0)
 * Note			:
 *
 * ------------------------------------------------------------------------------------------------------ */
uint8_t SPI_getFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & FlagName)  // if that Flag is set then execute
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SPI_getFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000c90:	2301      	movs	r3, #1
 8000c92:	e000      	b.n	8000c96 <SPI_getFlagStatus+0x1c>
	}

	return FLAG_RESET;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <SPI_PeripheralControl>:
 * Return Type	:	none
 * Note			:	SPI Peripherals are disabled by default
 *
 * ------------------------------------------------------------------------------------------------------ */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	460b      	mov	r3, r1
 8000cac:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000cae:	78fb      	ldrb	r3, [r7, #3]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d106      	bne.n	8000cc2 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000cc0:	e005      	b.n	8000cce <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	601a      	str	r2, [r3, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <SPI_SSOEConfig>:
 *					-> This Configuration is used when MCU is set as Master. The NSS pin is managed by the hardware.
 *					-> The NSS signal is driven LOW as soon as SPI is enabled in master mode (SPE = 1),
 *						and is kept LOW until the SPI is disabled (SPE = 0) [thus making slave talk or disable]
 * ------------------------------------------------------------------------------------------------------ */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000ce6:	78fb      	ldrb	r3, [r7, #3]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d106      	bne.n	8000cfa <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f043 0204 	orr.w	r2, r3, #4
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000cf8:	e005      	b.n	8000d06 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f023 0204 	bic.w	r2, r3, #4
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	605a      	str	r2, [r3, #4]
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <__libc_init_array>:
 8000d14:	b570      	push	{r4, r5, r6, lr}
 8000d16:	4d0d      	ldr	r5, [pc, #52]	; (8000d4c <__libc_init_array+0x38>)
 8000d18:	4c0d      	ldr	r4, [pc, #52]	; (8000d50 <__libc_init_array+0x3c>)
 8000d1a:	1b64      	subs	r4, r4, r5
 8000d1c:	10a4      	asrs	r4, r4, #2
 8000d1e:	2600      	movs	r6, #0
 8000d20:	42a6      	cmp	r6, r4
 8000d22:	d109      	bne.n	8000d38 <__libc_init_array+0x24>
 8000d24:	4d0b      	ldr	r5, [pc, #44]	; (8000d54 <__libc_init_array+0x40>)
 8000d26:	4c0c      	ldr	r4, [pc, #48]	; (8000d58 <__libc_init_array+0x44>)
 8000d28:	f000 f818 	bl	8000d5c <_init>
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	10a4      	asrs	r4, r4, #2
 8000d30:	2600      	movs	r6, #0
 8000d32:	42a6      	cmp	r6, r4
 8000d34:	d105      	bne.n	8000d42 <__libc_init_array+0x2e>
 8000d36:	bd70      	pop	{r4, r5, r6, pc}
 8000d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d3c:	4798      	blx	r3
 8000d3e:	3601      	adds	r6, #1
 8000d40:	e7ee      	b.n	8000d20 <__libc_init_array+0xc>
 8000d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d46:	4798      	blx	r3
 8000d48:	3601      	adds	r6, #1
 8000d4a:	e7f2      	b.n	8000d32 <__libc_init_array+0x1e>
 8000d4c:	08000d74 	.word	0x08000d74
 8000d50:	08000d74 	.word	0x08000d74
 8000d54:	08000d74 	.word	0x08000d74
 8000d58:	08000d78 	.word	0x08000d78

08000d5c <_init>:
 8000d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d5e:	bf00      	nop
 8000d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d62:	bc08      	pop	{r3}
 8000d64:	469e      	mov	lr, r3
 8000d66:	4770      	bx	lr

08000d68 <_fini>:
 8000d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6a:	bf00      	nop
 8000d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d6e:	bc08      	pop	{r3}
 8000d70:	469e      	mov	lr, r3
 8000d72:	4770      	bx	lr
